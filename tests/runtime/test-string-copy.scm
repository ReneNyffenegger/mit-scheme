(declare (usual-integrations))

(define (test-noop length iterations)
  (let ((from (make-string length))
	(to (make-string (fix:* 2 length))))
    (do ((i 0 (fix:+ i 1)))
	((fix:= i iterations)))))

(define (test-left length iterations)
  (let ((from (make-string length))
	(to (make-string (fix:* 2 length))))
    (do ((i 0 (fix:+ i 1)))
	((fix:= i iterations))
      (substring-move-left! from 0 length to length))))

(define (test-right length iterations)
  (let ((from (make-string length))
	(to (make-string (fix:* 2 length))))
    (do ((i 0 (fix:+ i 1)))
	((fix:= i iterations))
      (substring-move-right! from 0 length to length))))

(define (test-inline length iterations)
  (let ((from (make-string length))
	(to (make-string (fix:* 2 length))))
    (do ((i 0 (fix:+ i 1)))
	((fix:= i iterations))
      (do ((fi 0 (fix:+ fi 1))
	   (ti length (fix:+ ti 1)))
	  ((fix:= fi length))
	(string-set! to ti (string-ref from fi))))))