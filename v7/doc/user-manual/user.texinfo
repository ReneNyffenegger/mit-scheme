\input texinfo @c -*-texinfo-*-
@iftex
@finalout
@end iftex
@comment $Id: user.texinfo,v 1.36 1995/11/20 23:24:11 adams Exp $
@comment %**start of header (This is for running Texinfo on a region.)
@setfilename user.info
@settitle MIT Scheme User's Manual
@comment %**end of header (This is for running Texinfo on a region.)
@setchapternewpage odd
@syncodeindex vr cp
@syncodeindex fn cp
@syncodeindex ky cp

@ifinfo
This file documents the use of MIT Scheme.

Copyright @copyright{} 1991-95 Massachusetts Institute of Technology

This material was developed by the Scheme project at the Massachusetts
Institute of Technology, Department of Electrical Engineering and Computer
Science.  Permission to copy this document, to redistribute it, and to use
it for any purpose is granted, subject to the following restrictions and
understandings.

@enumerate
@item
Any copy made of this document must include this copyright notice in
full.

@item
Users of this document agree to make their best efforts (a) to return to
the MIT Scheme project any improvements or extensions that they make, so
that these may be included in future releases; and (b) to inform MIT of
noteworthy uses of this document.

@item
All materials developed as a consequence of the use of this document shall
duly acknowledge such use, in accordance with the usual standards of
acknowledging credit in academic research.

@item
MIT has made no warrantee or representation that the contents of this
document will be error-free, and MIT is under no obligation to provide any
services, by way of maintenance, update, or otherwise.

@item
In conjunction with products arising from the use of this material, there
shall be no use of the name of the Massachusetts Institute of Technology
nor of any adaptation thereof in any advertising, promotional, or sales
literature without prior written consent from MIT in each case.
@end enumerate
@end ifinfo

@titlepage
@title{MIT Scheme User's Manual}
@subtitle Edition 1.27 beta
@subtitle for Scheme Release 7.4
@subtitle May 30, 1995
@author by Stephen Adams
@author Chris Hanson
@author and the MIT Scheme Team

@page

@vskip 0pt plus 1filll
Copyright @copyright{} 1991-95 Massachusetts Institute of Technology

This material was developed by the Scheme project at the Massachusetts
Institute of Technology, Department of Electrical Engineering and Computer
Science.  Permission to copy this document, to redistribute it, and to use
it for any purpose is granted, subject to the following restrictions and
understandings.

@enumerate
@item
Any copy made of this document must include this copyright notice in
full.

@item
Users of this document agree to make their best efforts (a) to return to
the MIT Scheme project any improvements or extensions that they make, so
that these may be included in future releases; and (b) to inform MIT of
noteworthy uses of this document.

@item
All materials developed as a consequence of the use of this document shall
duly acknowledge such use, in accordance with the usual standards of
acknowledging credit in academic research.

@item
MIT has made no warrantee or representation that the contents of this
document will be error-free, and MIT is under no obligation to provide any
services, by way of maintenance, update, or otherwise.

@item
In conjunction with products arising from the use of this material, there
shall be no use of the name of the Massachusetts Institute of Technology
nor of any adaptation thereof in any advertising, promotional, or sales
literature without prior written consent from MIT in each case.
@end enumerate
@end titlepage

@node Top, Installation, (dir), (dir)

@ifinfo
Scheme is the UnCommon Lisp.  This Info file is the user's guide for the
MIT implementation of Scheme.  It describes how to install and run MIT
Scheme, how to execute and compile Scheme programs, and how to use
Scheme with Edwin and GNU Emacs.
@end ifinfo

@menu
* Installation::                
* Release Notes::               
* Running Scheme::              
* REPL::                        
* Debugging::                   
* Loading Files::               
* World Images::                
* Garbage Collection::          
* Compiling Files::             
* GNU Emacs Interface::         
* Edwin::                       
* Concept Index::               

 --- The Detailed Node Listing ---

Installation

* Unix::                        
* PC Operating Systems::        

Unix

* HP-PA Installation::          

PC Operating Systems

* System Requirements::         
* Manifest::                    
* PC Installation::             Installation

Release Notes

* News::                        
* C Back-End Release Notes::    
* PC Release Notes::            

News

* 7.3 News::                    Changes from Release 7.2 to 7.3
* 7.2 News::                    Changes from Release 7.1 to 7.2

C Back-End Release Notes

* Notes on C Back-End::         
* Problems with the C Back-End::  

PC Release Notes

* Known Problems::              

Running Scheme

* Basics of Starting Scheme::   
* Customizing Scheme::          
* Command-Line Options::        
* Environment Variables::       
* Starting Scheme from Windows 3.1/NT::  
* Leaving Scheme::              

Environment Variables

* Microcode Environment Variables::  
* Bchscheme Environment Variables::  
* PC Environment Variables::    
* Runtime Environment Variables::  
* Edwin Environment Variables::  

The Read-Eval-Print Loop

* The Prompt and Level Number::  
* Interrupting::                
* Restarting::                  
* The Current REPL Environment::  

Debugging

* Subproblems and Reductions::  
* Debugger::                    
* Debugging Aids::              
* Advising Procedures::         

Compiling Files

* Compilation Procedures::      
* Declarations::                
* Efficiency Tips::             

Declarations

* Standard Names::              
* In-line Coding::              
* Replacement of Operators::    
* Reduction of Operators::      

Efficiency Tips

* Coding style::                
* Global variables::            
* Fixnum arithmetic::           
* Flonum arithmetic::           
* Miscellaneous::               

Edwin

* Starting Edwin::              
* Leaving Edwin::               
* Last Resorts::                
* Comparison of Edwin 3.82 to Emacs 18.57::  

Comparison of Edwin 3.82 to Emacs 18.57

* Incompatibilities of Edwin::  
* Deficiencies of Edwin::       
* Subsystems Missing from Edwin::  
* Commands Missing from Edwin::  
* Variables Missing from Edwin::  
* Per-Buffer Variables::        
* Edwin Bugs::                  
@end menu

@node Installation, Release Notes, Top, Top
@chapter Installation

@menu
* Unix::                        
* PC Operating Systems::        
@end menu

@node Unix, PC Operating Systems, Installation, Installation
@section Unix

We will use as an example the installation for HP 9000 series 400
computers.  The installation for other Unix systems is similar.  If you
are installing for an HP 9000 series 700 or 800, see also @ref{HP-PA
Installation}.

MIT Scheme is distributed as a compressed `tar' file.  The tar file
contains a single directory, called @file{dist-7.3}, and that directory
contains subdirectories @file{bin}, @file{etc}, and @file{lib}.  The
@file{bin} subdirectory contains two executable files, @samp{scheme} and
@samp{bchscheme}.  The @file{etc} subdirectory contains several files
that are used during the installation process.  The @file{lib}
subdirectory contains several files and subdirectories that Scheme uses
while it is executing.

The goal of the installation is to put the executable files in a
directory where they will be executed as commands, and to put the
library files in some convenient place where Scheme can find them.

@itemize @bullet
@item
First unpack the distribution:

@example
gzip -cd hp400.tar.gz | tar xvf -
@end example

If you do not have the `gzip' program: we have built executables of
this program for each of the machines that we support.  Either use
the executable that we have already built, or else get the gzip
sources (from us or from numerous other sources) and build it
yourself.

@item
Next, go to the directory that you just unpacked:

@example
cd dist-7.3
@end example

The easiest way to install the files is to use the "install.sh" shell
script that we've provided in the distribution.  You will need to edit
that script to tell it where and how you want Scheme installed.  If
you want to do something more complicated, or if the script can't
easily be made to work for your system, use the script as a guide to
installation.

@item
The script assumes there is no pre-existing installation of MIT Scheme
on your system.  If there is, you may need to edit the script, or delete
the existing version (particularly the contents of
@file{/usr/local/lib/mit-scheme}, see the later note on editing
@samp{libdir}).  If you have trouble deleting the binary because it is in
use, try renaming it to @file{scheme.busy} and deleting it later.

@item
The installation script normally uses the command @samp{cp -pr} to copy
the files from the distribution directory to their final locations.  You
can change this by editing the definition of the @samp{install} variable
in the @file{install.sh} shell script.  Some versions of @samp{cp} do
not support the @samp{p} option; using simply @samp{cp -r} in this case
is acceptable.  Note that most versions of @samp{mv} require the source
and destination to be on the same physical device.

@item
The installation script may try to make some symbolic links during
the installation.  This is normally done using the command @samp{ln -s}.
If your system doesn't support symbolic links, or if you prefer to
copy or hard-link files, change the definition of the @samp{link}
variable in the shell script.

@item
For many systems, a standard place to put executable files is the
directory @file{/usr/local/bin}.  If this is true for your system, we
suggest installing the executables there.  Otherwise, you probably
have some other directory that serves the same purpose; edit
@file{install.sh} and change the definition of the shell variable
@samp{bindir} to be this other directory.

@item
Normally, MIT Scheme's auxiliary files are stored in the directory
@file{/usr/local/lib/mit-scheme/}.  If you can, we suggest that you
create such a directory and install these files there.  Otherwise,
create a directory somewhere else and edit the installation script
to change the value of the variable @samp{libdir} to be this directory.

@item
If you have GNU Emacs installed on your system, uncomment the
definitions of the variables @samp{infodir}, @samp{emacslisp}, and
@samp{movemail} in the installation script.  You will also need to edit
these definitions so that they correctly indicate where the GNU Emacs
files are located.

@item
Once you are satisfied that the @file{install.sh} script is correct,
execute it:

@example
./install.sh
@end example

@item
After @file{install.sh} finishes, you can delete the @file{dist-7.3}
directory that you unpacked earlier.

You should now be able to run MIT Scheme by typing

@example
scheme
@end example

@noindent
at the command line (if you use the C shell, you may have to type
@samp{rehash} before @samp{scheme} will be recognized).
@end itemize

@menu
* HP-PA Installation::          
@end menu

@node HP-PA Installation,  , Unix, Unix
@subsection HP-PA Installation


If you are using an HP 9000 series 700/800 computer (often called an HP
Precision Architecture machine, or HP-PA for short), read this section.

Scheme has built-in code that flushes the instruction and data caches
of your machine in certain circumstances.  This code is sensitive to
your computer's model, because each model has different cache
hardware.

This distribution contains a database, called @file{hppacach.mod}, that
describes the cache structure for each model of computer.  As of this
writing, that database contains entries for the following models:

@example
705, 710, 715, 720, 730, 735, 750, 755, 834, 835, 850, 867
@end example

@noindent
If you have a model that is not in the database, Scheme will not run
-- instead it will print an error message informing you of this fact,
and stop.  If this happens, you must add an entry to the database.
This must be done once, at installation, for each new model.

Here is the procedure for updating the database:

@itemize @bullet
@item
Run the program @file{hppacache} that is included in the distribution.
You must give this program the filename of the database file as an
argument.  Normally the database file name is
@file{/usr/local/lib/mit-scheme/hppacach.mod}, but if you install Scheme
in a non-standard place it will be different.  For example, if you
install Scheme as @file{/usr/foo/mit-scheme/}, the database file is
called @file{/usr/foo/mit-scheme/hppacach.mod}.

@item
Assuming that Scheme is installed in the normal place, update the
database by becoming the super-user and executing the following
commands on your machine:

@example
cd /usr/local/lib/mit-scheme
./hppacache -update hppacach.mod
@end example

The reason that you must be super-user is that @file{hppacache} needs to
read the device @file{/dev/kmem} to get the information that it needs.
Normally, @file{/dev/kmem} is readable only by the super-user, or by
users in group @code{sys}.  Thus, becoming super-user is the easiest way
to read this information.  An alternative method for doing this is to
change the permissions of the @file{hppacache} program so that it is in
group @code{sys}, and to turn on its ``set group ID on exec'' permission
bit, but since this also requires you to be super-user, you might as
well just execute the program as the super-user.

Please note that you must execute this program on the computer whose
model you wish to add to the database.  Also, if you wish to add several
models to the database, you must execute the program once on each model.
If you have several computers that are all of the same model, you need
only update the database once from one of the computers; thereafter all
of the other computers of that model will work.

@item
If you add a new model to the database, we'd appreciate it if you would
send us the model information, so that we can update the copy of the
database that we distribute to others.  This can be done using the
@file{hppacache} program, as follows:

@example
cd /usr/local/lib/mit-scheme
./hppacache -print hppacach.mod > model-7xx
@end example

(If you have previously updated the database, you do not need to be
super-user to execute this command.)  The resulting file,
@file{model-7xx} in this example, is the model information for the
machine that you executed the command on; it is C code that we can use
to update our copy of the database.  Send the model information for each
new model to us by electronic mail at
@code{bug-cscheme@@zurich.ai.mit.edu}.  Thanks!
@end itemize

@c NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
@node PC Operating Systems,  , Unix, Installation
@section PC Operating Systems

This section describes how to install MIT Scheme on DOS, Windows 3.1, and
Windows NT.  We would prefer that the Windows version be used,
rather than the DOS version, because we intend to maintain the DOS
version only so long as it is convenient.  For the most part the
installation on any of these platforms uses the same files, and the
procedure is similar.  It is possible to install MIT Scheme so that it
will run under all three operating systems on one computer, but this
does require some care with the configuration of the system.

Note that we have only tested the DOS version on Microsoft DOS 5.0.

@menu
* System Requirements::         
* Manifest::                    
* PC Installation::             Installation
@end menu

@node System Requirements, Manifest, PC Operating Systems, PC Operating Systems
@subsection System Requirements

MIT Scheme requires at least a 386SX with 8Mb RAM.
The bare minimum
disk space required is 5.5Mb, which gives you a command line interface
for Scheme.  We strongly recommend a more advanced environment.  To
build the Edwin editor band requires an additional 4.3Mb.  The whole
installation without source code occupies 36Mb of disk.

@node Manifest, PC Installation, System Requirements, PC Operating Systems
@subsection Manifest

The installation is split into several files according to functional
units and the size constraints of a 1.4M high density 3.5" floppy disk.
The following files are distributed:

@example
BIN.ZIP         @r{Scheme binaries for Windows 3.1/Windows NT}
DOSBIN.ZIP      @r{Scheme binaries for DOS}
LIB.ZIP         @r{Smaller files from Scheme library}
RUNTIME.ZIP     @r{@file{runtime.com} band}
RUNNOFLO.ZIP    @r{@file{runtime.com} band for DOS machines with no FP hardware}
EDDEL.ZIP       @r{@file{eddel.com}: a kit to build @file{edwin.com} band}
COMPDEL.ZIP     @r{@file{compdel.com}: a kit to build @file{compiler.com} band}

HELP.ZIP        @r{WinHelp User and Reference Manuals}
BCIRUN1.ZIP     @r{Debugging information for runtime system}
BCIRUN2.ZIP     @r{    "          "       "     "      "}
BCIRUN3.ZIP     @r{    "          "       "     "      "}
BCIED1.ZIP      @r{Debugging information for Edwin}
BCIED2.ZIP      @r{    "          "       "    "}
BCIED3.ZIP      @r{    "          "       "    "}
BCINOFLO.ZIP    @r{Extra debugging information for machines with no FP hardware}

SRCRUN.ZIP      @r{Source code for the runtime system}
SRCUC.ZIP       @r{Source code for the microcode (C)}
SRCED.ZIP       @r{Source code for Edwin}
SRCCOMP.ZIP     @r{Source code for i386 compiler}

WIN32S.ZIP      @r{Win32s installation floppy from Microsoft}
INSTALL.TXT     @r{These instructions}
UNZIP.EXE       @r{Program to unpack the @file{.zip} files}
@end example

Minimal installation on Windows NT requires: @file{BIN.ZIP},
@file{LIB.ZIP} and @file{RUNTIME.ZIP}.

For the Edwin editor and the native code compiler add @file{EDDEL.ZIP}
and @file{COMPDEL.ZIP} repectively.

Any configuration for Windows 3.1 is the same as for Windows NT except
that Win32S also needs to be installed.

For DOS the minimal installation comprises @file{DOSBIN.ZIP},
@file{LIB.ZIP} and one of @file{RUNTIME.ZIP} or @file{RUNNOFLO.ZIP}.

@node PC Installation,  , Manifest, PC Operating Systems
@subsection PC Installation

These installation instructions describe how to install MIT Scheme on
one or more of DOS, Windows 3.1, and Windows NT.  If you are
installing for DOS and another operating system, you should do the
bulk of the installation using the windowing environment.

In each of the following steps the amount of disk space consumed is
indicated in square brackets.  These sizes do not include the
@file{.zip} files which are required only during installation.

@enumerate
@item 
MIT Scheme under Windows 3.1 requires the Win32s system (version 1.1) to
be installed.  If you have not previously installed the Win32s system
then you should create a floppy disk containing the contents of the
@file{win32s.zip} file, e.g:

@example
a:
unzip @var{wherever}\win32s.zip   
@end example

Run the @file{setup} command on the floppy disk.

@noindent
If you are not sure whether you have Win32s installed, or what version
you have installed, try to install it anyway.  If you have version 1.0
then the Win32s installation disk will upgrade your Win32s system to
version 1.1.

@example
a:setup
@end example

@item
Decide on where to install MIT Scheme.
We suggest the default: @file{C:\SCHEME}.
Create the root directory which we from now on refer to as @var{scheme}.
If for example, you choose the default:

@example
mkdir c:\scheme
cd \scheme
@end example

@noindent
@var{scheme} is the string `@code{C:\scheme}'.

@item
In the @var{scheme} directory unzip the following essential files:
@file{bin.zip}, @file{lib.zip} and @file{runtime.zip} [5.5Mb].

@example
unzip @var{wherever}\bin.zip
unzip @var{wherever}\lib.zip
unzip @var{wherever}\runtime.zip
@end example

This will create the directory structures @file{@var{scheme}\bin},
@file{@var{scheme}\lib} and @file{@var{scheme}\etc}, and unpack the
essential files.
(@var{Wherever} stands for the place that you have put the @file{.zip}
files, which might be another directory or a floppy disk.)

@noindent
If you have a computer without floating-point hardware (e.g.@: a 386
machine or a 486SX) and you wish to run the DOS version then you must
install the runtime with special floating point support instead of
@file{runtime.zip}:

@example
unzip @var{wherever}\runnoflo.zip
@end example

@item
To install the DOS binaries, unzip the @file{dosbin.zip} file.

@example
unzip @var{wherever}\dosbin.zip
@end example

This creates a @file{@var{scheme}\dos-bin} directory containing the DOS
versions of the @file{.exe} files.  These files are different from the
Windows versions, so they are placed in a different directory to allow
both versions to co-exist on your computer.  It is only the @file{.exe}
files that differ between DOS and Windows.  The other parts of the MIT
Scheme system are shared.  The DOS version will run under Windows 3.1
but not under NT.  Either running on DOS or Windows 3.1, the DOS version
has @emph{no} graphics support

@item
If you are installing for Windows 3.1 only, do @emph{one} of the
following:

@itemize @bullet
@item
Put the following line in the @file{autoexec.bat} file to ensure that
the @file{@var{scheme}\bin\win31} directory is on the path:

@example
path %PATH%;@var{scheme}\bin\win31
@end example

@noindent
This command must be in a @file{.bat} file to work

@item
Copy the files from @file{@var{scheme}\bin\win31} into
@file{@var{scheme}\bin}.
@end itemize

@item
If you are installing for Windows NT only, do @emph{one} of the
following:

@itemize @bullet
@item
As system
administrator add @file{@var{scheme}\bin\nt} to the @code{PATH} in the
system environment (using the Registry Editor, @code{regedt32}

@item
As an individual place @code{PATH=}@var{scheme}@code{\bin\nt} in your
environment (use the control panel's system option

@item
Copy the files from @file{@var{scheme}\bin\nt} into
@file{@var{scheme}\bin}.
@end itemize

@item
If you are installing for both Windows 3.1 and Windows NT then you must
use use environment variables and the @code{PATH} rather than copying
files, i.e.@: you must arrange for Windows 3.1 to be run with
@file{@var{scheme}\bin\win31} on the path and for Windows NT to be run
with @file{@var{scheme}\bin\nt} on the path.
This can be done by putting

@example
path %PATH%;@var{scheme}\bin\win31
@end example

@noindent
in the @file{autoexec.bat} file and adding @file{@var{scheme}\bin\nt} to
the Windows NT system environment path.

@item
If you are installing for DOS there is no need to add things to the
@code{PATH}.

@item
If you did not choose the default installation directory, make sure that
the environment variable @code{MITSCHEME_LIBRARY_PATH} is defined:

@example
set MITSCHEME_LIBRARY_PATH=@var{scheme}\lib
@end example

@item
Now test the installation so far.
Under either Windows system, 
you should be able to get a Scheme system running in its terminal
window by running the following from the Program Manager or the File
Manager

@example
@var{scheme}\bin\scheme
@end example

From DOS you should be able to get Scheme running by typing the
following at the DOS prompt:

@example
@var{scheme}\dos-bin\scheme
@end example

@noindent
If there are any problems at this stage, review the installation so far.
Remember that you might have to restart your machine to get the effect
of any changes that you made in @file{autoexec.bat} or the NT registry.

@item
Windows versions only.
Now you should create a Program Manager group for MIT Scheme.
This can be done by running a Scheme program from the Program Manager
using the @code{File|Run} option:

@example
@var{scheme}\bin\scheme -load @var{scheme}\etc\pmgrp
@end example

@noindent
This program creates a program group called `MIT Scheme' which contains

@itemize @bullet
@item
Icons for running scheme in several configurations

@item
Windows Help versions of the Scheme Reference Manual and the MIT Scheme
User's Manual.

@item
`Mincer' icons for building the rest of the system
@end itemize

@noindent
At this point only the Scheme icon called `Runtime' will execute.
Test it.  The other Scheme icons (`Edwin', `Compiler' and `MIT Scheme'
shield) should report that they cannot find their bands.

@item
Windows versions only.
To install the help files, unpack @file{help.zip}:

@example
unzip @var{wherever}\help.zip
@end example

@noindent
This installs two windows help files, @file{user.hlp} and
@file{scheme.hlp}, in @file{@var{scheme}\bin}.

@item
To install the Edwin editor you need to build the @file{edwin.com} band.
First unpack the delta file @file{eddel.com} [1.6Mb]:

@example
cd @var{scheme}
unzip @var{wherever}\eddel.zip
@end example

To build @file{edwin.com} start the `build EDWIN.COM band' icon, or run
the following command:

@example
@var{scheme}\bin\scheme -large -load @var{scheme}\etc\build -eval (edwin.com)
@end example

@noindent
This will load in @file{eddel.com} and create the new band [4.3Mb].
After a successful build the program will exit.
The @file{edwin.com} band can be used by both the DOS and Windows
versions, so you only need to do this step once, even if you are
installing for more than one of DOS, Windows 3.1, and Windows NT.

If you are installing only for DOS you will have to build
@file{edwin.com} from the command line.  Be sure to run the DOS
@file{scheme.exe} rather than the Windows version:

@example
@var{scheme}\dos-bin\scheme -large -load @var{scheme}\etc\build -eval (edwin.com)
@end example

@item
To install the compiler you need to build the @file{compiler.com} band.
First unpack the @file{compdel.com} delta file [2.5Mb]:

@example
cd @var{scheme}
unzip @var{wherever}\compdel.zip
@end example

To build @file{compiler.com} start the `build COMPILER.COM band' icon,
or run the following command:

@example
@var{scheme}\bin\scheme -large -load @var{scheme}\etc\build -eval (compiler.com)
@end example

@noindent
This will load in @file{compdel.com} and create the new
@file{compiler.com} band [4.8Mb].  After a successful build the program
will exit.
As for Edwin, this step needs to be done only once.

If you choose to build this band using the DOS version be sure to
run the DOS @file{scheme.exe} rather than the Windows version:

@example
@var{scheme}\dos-bin\scheme -large -load @var{scheme}\etc\build -eval (compiler.com)
@end example

@item
If you want both Edwin and the compiler in one band you should build the
@file{all.com} band.  First unpack the delta files [4.1Mb unless already
unpacked in previous steps]:

@example
cd @var{scheme}
unzip @var{wherever}\eddel.zip
unzip @var{wherever}\compdel.zip
@end example

To build @file{all.com} start the `build ALL.COM band' icon, or run the
following command:

@example
@var{scheme}\bin\scheme -large -load @var{scheme}\etc\build -eval (all.com)
@end example

@noindent
This will load in both @file{eddel.com} and @file{compdel.com} into the
runtime band and create the new band [6.7Mb].  After a successful build
the program will exit.

If you choose to build this band under DOS, be sure to run the DOS
@file{scheme.exe} rather than the Windows version:

@example
@var{scheme}\dos-bin\scheme -large -load @var{scheme}\etc\build -eval (all.com)
@end example

@item
Any combination of @file{edwin.com}, @file{compiler.com} and
@file{all.com} may be used.  They may be built in any order: it is not
necessary to build either of @file{edwin.com} and @file{compiler.com}
before building and using @file{all.com}.
The bands are shared by all of the supported operating systems so you
only have to build the bands once, even if you want to use them from,
say, both DOS and Windows 3.1.

After building the bands you may tidy the MIT Scheme group by removing
the mincer icons and recover disk space by deleting the delta files
[4.1Mb] and the @file{runtime.com} band [2.3Mb] if you do not need it.

To create icons that use @code{bchscheme} instead of @code{scheme} copy
the icons and edit the command lines to change `scheme' to `bchschem'
(that is right: no tailing `e').

@item
Debugging information can be installed by uncompressing the
@file{bci*.zip} files in the Scheme root directory @var{scheme}.  The
total space required for all of the debugging information is 7.5Mb.
The most useful is the runtime debugging info which is in
@file{bcirun1.zip} through @file{bcirun3.zip} [3.6Mb installed].

If you have installed the DOS version for machines without hardware
floating point support then @file{bcinoflo.zip} should be uncompressed
also.  This must be done @emph{after} the @file{bcirun*.zip} files.

Debugging information files can be installed in the Scheme root
directory or in another directory.  If another directory is chosen then
set the @code{MITSCHEME_INF_DIRECTORY} environment variable to this
directory.  @file{bcied1.zip} through @file{bcied3.zip} [3.8Mb
installed] hold the debugging information files for Edwin.
@end enumerate

@node Release Notes, Running Scheme, Installation, Top
@chapter Release Notes

This chapter describes interesting features and problems for the 7.3
release.

@menu
* News::                        
* C Back-End Release Notes::    
* PC Release Notes::            
@end menu

@node News, C Back-End Release Notes, Release Notes, Release Notes
@section News

The last full release of the MIT Scheme system was version 7.1.3 in
1991.  Since that time, there was a partial release of version 7.2 for
i386/i486 machines and some MIPS R3000 machines.  This section
summarizes the changes that have occurred since version 7.1.3.  The
changes are divided into two parts: those that were incorporated in the
7.2 partial release, and those that were subsequently incorporated.

@menu
* 7.3 News::                    Changes from Release 7.2 to 7.3
* 7.2 News::                    Changes from Release 7.1 to 7.2
@end menu

@node 7.3 News, 7.2 News, News, News
@subsection Changes from Release 7.2 to 7.3

This is an abbreviated list of the changes that have been incorporated
in the 7.3 release since the (partial) 7.2 release.

@itemize @bullet
@item
Support for MS Windows (3.1 and NT).

@item
Native compiled-code support for DEC Alpha.

@item
Compiler can now generate C code.  This is used to support the Sun SPARC
and IBM RS6000 architectures.

@item
Support for dynamic loading of compiled C code on several operating
systems, including HP-UX, OSF/1, SunOS 4, and AIX.

@item
New data structures: red/black trees and weight-balanced trees.

@item
Redesign of hash tables makes them much faster and somewhat more
flexible.

@item
Completely new random-number generator.  The interface to the
random-number generator has been changed to be like that of Common Lisp.

@item
Record abstraction now uses a special @dfn{record} type to represent
records (previously it used vectors).  @code{define-structure} now
creates records by default; these records are identical to those created
with the record abstraction.

@item
@code{call-with-current-continuation} is now properly tail-recursive.

@item
New command-line switch @code{-no-suspend-file} prevents the generation
of @file{scheme_suspend} files.

@item
Uncompression of compiled-code debugging information is now memoized
to save time when doing many accesses to the same information (a
common occurrence).

@item
Constant space now grows automatically when needed.

@item
New procedures:

@example
call-with-values                @r{;replaces} with-values
current-load-pathname
error-output-port
fold-left
fold-right
interaction-i/o-port
notification-output-port
prompt-for-command-char
prompt-for-command-expression
prompt-for-confirmation
prompt-for-evaluated-expression
prompt-for-expression
standard-unparser-method        @r{;replaces} unparser/standard-method
stream-first
stream-rest
symbol<?
trace-output-port
@end example

@item
@code{string-pad-left} now truncates from the left instead of the right.

@item
Argument to @code{make-graphics-device} is now a symbol.

@item
Each @sc{repl} now has its own working directory pathname and pathname
defaults.  @code{set-working-directory-pathname!} changes only the value
for the current @sc{repl}.

@item
The definitions of the following procedures have been changed to
implement more useful behavior:

@example
string-capitalized?
string-lower-case?
string-upper-case?
substring-capitalized?
substring-lower-case?
substring-upper-case?
@end example

@item
New Edwin features:

@display
@code{M-x dabbrev-expand}
@code{M-x describe-syntax}
@code{M-x rcs-ci-locked-files}
@code{M-x rcs-diff}
@code{M-x rcs-list-locked-files}
@code{M-x rcs-log}
@code{M-x recover-file}
@code{M-x show-parameter-list}
@code{M-x sort-lines and other sorting commands}
@code{auto-mode-alist} variable (as in Emacs)
Encryption/decryption of files in @code{Dired}
Undo upgraded to match GNU Emacs 18.57
Buffers grow/shrink with constant amortized time
Emacs 19 tags support (multiple tags files, inclusion)
@end display

@item
Edwin compression/uncompression commands changed to use @code{gzip}
instead of @code{compress}.

@item
Edwin now has text-properties mechanism that permits implementation
of highlighted and mouse-sensitive regions.
@end itemize

@node 7.2 News,  , 7.3 News, News
@subsection Changes from Release 7.1 to 7.2

This is an abbreviated list of the changes that were incorporated
in the (partial) 7.2 release since the 7.1 release.

@itemize @bullet
@item
Support for MS DOS.

@item
Native compiled-code support for the Intel i386 and i486 architectures.

@item
Fixes to MIPS compiled-code support MIPS R3000 with large cache-line
sizes.

@item
Complete redesign of the error system.

@item
X11 graphics interface redesigned.  The new design is smarter about
interaction with the window manager (for example, it implements the
@code{WM_DELETE_WINDOW} protocol) and has some limited support for event
handling.  Windows are now closed when they are reclaimed by the garbage
collector.

@item
Redesign of @sc{i/o} ports.  New design supports ports that perform both
input and output.

@item
Ports now have better-defined control over blocking mode and terminal
mode.  Flushing of output buffers is not done automatically, except for
the console port.

@item
New procedures:

@example
*default-pathname-defaults*
->namestring
->truename
close-port
directory-namestring
directory-pathname
directory-pathname-as-file
enough-namestring
enough-pathname
file-access
file-attributes-direct          @r{;same as} file-attributes
file-modification-time-direct
file-modification-time-indirect @r{;same as} file-modification-time
file-namestring
file-pathname
file-readable?
host-namestring
i/o-port?
make-generic-i/o-port
make-i/o-port
open-i/o-file
pathname-simplify
pathname-wild?
pathname=?
port/copy
port/input-channel
port/operation
port/operation-names
port/output-channel
port/state
port?
record-copy
record-modifier                 @r{;replaces} record-updater
set-port/state!
@end example

@item
@code{with-input-from-file} and @code{with-output-to-file} no longer
close the port when they are exited abnormally.

@item
Redefined @code{#!optional} and @code{#!rest} to be something distinct
from symbols.

@item
Strings now accept @code{"\@var{nnn}}" octal character escapes, much
like those in C.

@item
Redesign of pathname abstraction.  New design is very similar to the
Common Lisp pathname abstraction.

@itemize @bullet
@item
->PATHNAME no longer accepts a symbol as an argument.  Only strings
and pathnames are valid.

@item
Procedures eliminated:

@example
canonicalize-input-filename
canonicalize-input-pathname
canonicalize-output-filename
canonicalize-output-pathname
canonicalize-overwrite-filename
canonicalize-overwrite-pathname
home-directory-pathname
init-file-truename
pathname->absolute-pathname
pathname->input-truename
pathname->output-truename
pathname->overwrite-truename
pathname->string
pathname-components
pathname-default-host
pathname-directory-path
pathname-directory-string
pathname-name-path
pathname-name-string
pathname-new-host
pathname-relative?
string->pathname
symbol->pathname
@end example

@item
@code{pathname-default} no longer accepts a @var{host} argument.

@item
Representation of pathname directories changed to match Common Lisp.
Directory is now either @code{#f} or a list of symbols and strings with
first element either @code{absolute} or @code{relative}.

@item
Unix pathnames now set @var{device} and @var{version} to
@code{unspecific}.  @code{unspecific} now means that the field is not
used by the operating system.

@item
Parsing rules for unix filenames changed: the file type is the part of
the name after the last dot, if any.  If the dot occurs at the beginning
or end of the filename, then it doesn't count -- in that case there is
no type.  Thus, names like @file{.} and @file{..} have no type.
@end itemize

@item
New Edwin features:

@display
@code{M-x manual-entry}
@code{M-x outline-mode}
@code{M-x shell-resync-dirs}
@code{M-x shell-command}
@code{M-x shell-command-on-region}
@code{M-x telnet}
@sc{rmail} summary
@sc{rmail} sort
@sc{repl} mode and asynchronous evaluation
Printing commands
``run light'' for evaluation commands
Reading and writing of compressed files (@code{".Z"} suffix)
Reading and writing of encrypted files (@code{".KY"} suffix)
Compress/uncompress commands for @code{Dired}
Support for X protocols: @code{WM_DELETE_WINDOW} and @code{WM_TAKE_FOCUS}
Time, load, and mail notification in mode line
@end display
@end itemize

@c @node Unix Release Notes, C Back-End Release Notes, News, Release Notes
@c @section Unix Release Notes

@node C Back-End Release Notes, PC Release Notes, News, Release Notes
@section C Back-End Release Notes

This release introduces an important new feature: the compiler can
generate output in C, which can then be compiled and linked using the
usual C development tools.  This feature is being used to support
architectures, such as the SPARC and IBM RS6000, for which the compiler
does not have native-code support.

@cindex C back-end
MIT Scheme systems that have been built using this compiler feature are
referred to as @dfn{C back-end} systems.  This section provides a brief
description of the features and known problems for such systems.

@menu
* Notes on C Back-End::         
* Problems with the C Back-End::  
@end menu

@node Notes on C Back-End, Problems with the C Back-End, C Back-End Release Notes, C Back-End Release Notes
@subsection General Notes

This section describes the general design of C back-end systems.

@itemize @bullet
@item
The C back end was written very recently, and we do not use it
ourselves for development--we have native back ends for the
hardware that we use regularly.  Furthermore, most of the
system-building tools and changes were put together and tested
immediately preceding the release.  It is not unlikely that there
are serious problems and shortcomings.  We'd like to hear about
them so we can fix them or bypass them for a future release.  If
something does not work, do not assume that we know about it.
Please report it.  The worse that can happen is that we hear about
it several times.

@item
The compiler produces C code that works in the context of the MIT
Scheme runtime library.  It is not stand-alone code, and there is
currently no way to generate stand-alone executables.

@item
We have done some performance testing on machines where we have
both a native back end and the C back end.  The C back end code is
somewhat larger and slower than the native code.  The speed varies
depending primarily on the number of inter-C-procedure calls (even
within a single source file).  In some cases the C code is
somewhat faster than the native code, but it is usually noticeably
slower.  The average is about 2.5 times slower.

@item
The output code should work on virtually any modern
general-purpose architecture with an ANSI-compliant (perhaps even
a traditional K&R) C compiler.  We've tried it on several 32-bit
architectures (HP PA, Sparc, Motorola 68040, RS6000/Power) and a
64-bit architecture (Alpha).

However, there may very well be assumptions of the following form:

@itemize @bullet
@item
Memory is byte-addressable.

@item
Addresses and ordinary data live in the same memory.  Some
special-purpose processors do not satisfy this constraint.

@item
@code{unsigned} data items and addresses fit into the same memory, and
if @code{union}-ed, take the same space.

@item
Signed integers are represented using 2s-complement representation.

@item
The machine/OS uses the @sc{ascii} character set.  This is not a
property of the compiler per-se, but of the MIT Scheme system.
@end itemize

In addition, some configuration of the compiler, microcode and
build-scripts would have to be done for new architectures/operating
systems.  The things that come to mind are:

@itemize @bullet
@item
Dynamic loading primitives are OS-dependent.

@item
Basic microcode configuration, including:

@itemize @bullet
@item
OS interface.

@item
Choosing a new machine type (FASL numbers in @file{config. h}).
@end itemize

@item
Build scripts dispatch on the OS and architecture type, and only
understand a handful of types.

@item
The compiler has a table of C compiler and linker switches
for the configurations we have tried.  It needs to be extended
for new configurations, although this can be done easily.
@end itemize

If you are interested in bringing up the system on a new configuration,
please contact us for further instructions, and to obtain the set of
crude tools that we use to do this.

@item
The performance of the output code could be greatly improved by
judicious use of assembly language to achieve faster cross-module tail
recursion.  So far, we've given more weight to portability than to
performance.

@item
The resulting C code can be compiled and statically linked with the MIT
Scheme @emph{microcode} (the runtime library is linked in this way), or
compiled and dynamically loaded and linked if the operating system
supports this feature.  The C code must be compiled defining the
@code{COMPILE_FOR_STATIC_LINKING} if it is to be statically linked into
the @emph{microcode} or collected into a larger dynamically-loadable
library (e.g.@: edwin or the compiler).  If you'd like to put together a
shared library of a large subsystem that you have written, please
contact us for advice on how it can be done.
@end itemize

@node Problems with the C Back-End,  , Notes on C Back-End, C Back-End Release Notes
@subsection Problems with the C Back-End

This section details problems and shortcomings of the system that are
specific to the C back-end.

@itemize @bullet
@item
@code{compile-procedure} and @code{compile-scode} do not work.  This
will be fixed for a future release and is not very hard to bypass in
most cases.  @code{compile-procedure} gives an error.
@code{compile-scode} returns something which is not a compiled
expression.  @code{cf} and @code{compile-bin-file} work.

@item
Dynamically loaded compiled modules are not unloaded when no longer
accessed.  In particular, after a @code{disk-restore}, previously loaded
modules are still mapped.  In addition, at least in some versions of
unix, the shared object file cannot be deleted while it is loaded, so
recompilation of a module in place will fail if some process has it
already loaded.

@item
Multiple loading does not work.  This is bad for development.  After
loading a compiled module once, it cannot be reloaded (presumably after
recompilation).

@item
@code{fasdump} does not work for compiled code.  It gives an error.
Only bands can be dumped.

@item
Several C compilers are unhappy about the size of the resulting C
procedures.  They often turn their optimizers off.

@item
Some C compilers/optimizers produce non-working code for some of the
output.  In particular, we've had serious problems with the
RS6000/AIX-3.2 C compiler.

@item
Several C compilers give copious ``statement not reached'' warnings
about the resulting code.  This arises from the heavy use of macros
expanding into the pattern

@example
do
@{
  @var{body}
@} while (0)
@end example

@noindent
Most of these macros are not really necessary, and the code generator
could just issue the @var{body} directly.

@item
The mechanism for accreting object files into large dynamically-loadable
libraries is currently ad-hoc.
@end itemize

@node PC Release Notes,  , C Back-End Release Notes, Release Notes
@section PC Release Notes

@menu
* Known Problems::              
@end menu

@node Known Problems,  , PC Release Notes, PC Release Notes
@subsection Known Problems in this Beta Release

@itemize @bullet
@item
The Windows version of MIT Scheme is more robust under NT than Windows
3.1

@item
[NT] Exclusive file access problems.  Edwin sometimes can't write a file
that is still open for reading.

Typically you will have entered @code{(load "foo.scm")} in the
interaction buffer and got an error, say a mis-matched parenthesis.
You then switch to the @code{foo.scm} buffer, fix the problem and then
try to save the file.
Edwin refuses, saying

@example
Unable to open file "@var{your-path}\\foo.scm" because: Unknown
@end example

@noindent
Work-around: In the interaction buffer: Quit to top level.  Do a
@code{(gc-flip)}, which forces the file to be closed when the file port
is garbage-collected.  Now you will be able to save the file.

@item
@code{MITSCHEME_INF_DIRECTORY} sometimes does not work.
The runtime system cannot find the debugging information unless it is on
the @file{C:} drive.
To test if the debugging information is available, try

@example
(pp pp)
@end example

@noindent
If the debugging information is available the @code{pp} procedure
pretty-prints procedures as Scheme code.
If the information cannot be found then it prints the procedure as an
opaque object, similar to this:

@example
#[compiled-procedure 13 ("pp" #x2) #xF #x646BF7]
@end example

@item
Edwin autoloads.
A few files that are automatically part of Edwin under unix are not part
of Edwin in the PC.  These can be loaded manually from the auto-load
directory, for example, by putting

@example
(edwin-load "dabbrev")
@end example

@noindent
in your @file{edwin.ini} file.

@item
DOS version 6.  Although we have not tested the DOS version under
anythig other than MS-DOS 5.0, we have the following anecdotal evidence:

@itemize @bullet
@item
On DOS 6.2 with @code{emm386} you may have to put the following in
@file{config.sys}:

@example
device=emm386 noems novcpi
@end example
@end itemize
@end itemize

@c @node
@c @subsection NT build
@c 
@c 
@c @table @asis
@c @item Build
@c The Windows/NT version can be built only under Windows NT.
@c 
@c @item no TOUCH command
@c Create the following 1 line script in @file{TOUCH.BAT}:
@c 
@c @example
@c echo on > %1
@c @end example
@c 
@c @item can't find @file{w32sut.h}
@c These files are a part of Win32S: @file{w32sut.h}, @file{?.dll}, @file{?.dll}
@c You need to copy @file{w32sut.h} from 
@c @end table
@c 
@c 
@c w32sut.h & dlls to ntutl/config?

@c NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
@node Running Scheme, REPL, Release Notes, Top
@chapter Running Scheme

This chapter describes how to run MIT Scheme on a unix system or a PC
running DOS, Windows 3.1, or Windows NT.
It also describes how you can customize the behavior of MIT Scheme
using command-line options and environment variables.

@menu
* Basics of Starting Scheme::   
* Customizing Scheme::          
* Command-Line Options::        
* Environment Variables::       
* Starting Scheme from Windows 3.1/NT::  
* Leaving Scheme::              
@end menu

@node Basics of Starting Scheme, Customizing Scheme, Running Scheme, Running Scheme
@section Basics of Starting Scheme

Usually, MIT Scheme is invoked by typing

@example
scheme
@end example

@noindent
at your operating system's command interpreter. (Under Windows 3.1 you
must use the Program Manager's @var{Run} command, or an icon.)  Scheme
will load itself, clear the screen, and print something like this:

@example
Scheme saved on Thursday December 2, 1993 at 6:18:35 PM
  Release 7.3.0 (beta)
  Microcode 11.146
  Runtime 14.166
@end example

@noindent
This information, which can be printed again by evaluating

@findex identify-world
@lisp
(identify-world)
@end lisp

@cindex release number
@cindex microcode, version
@cindex runtime system, version
@cindex version numbers
@noindent
tells you the following version information.  ``Release'' is the release
number for the entire Scheme system.  This number is changed each time a
new version of Scheme is released.  An ``(alpha)'' or ``(beta)''
following the release number indicates that this is a alpha- or
beta-test release.  ``Microcode'' is the version number for the part of
the system that is written in C.  ``Runtime'' is the version number for
the part of the system that is written in Scheme.

@cindex subsystem versions
@cindex SF, version
@cindex compiler, version
@cindex Edwin, version
@cindex student package, version
@cindex compatibility package, version
Following this there may be additional version numbers for specific
subsystems.  @samp{SF} refers to the scode optimization program
@code{sf}, @samp{Liar} is the native-code compiler, 
@samp{Edwin} is the Emacs-like text editor,
and @samp{Student} is the S&ICP compatibility package.

@cindex compiler, starting
If the compiler is supported for your machine, you can invoke it by
giving Scheme the @samp{-compiler} option:

@example
scheme -compiler
@end example

@noindent
This option causes Scheme to use a larger constant space and heap, and
to load the world image containing the compiler.

@node Customizing Scheme, Command-Line Options, Basics of Starting Scheme, Running Scheme
@section Customizing Scheme

You can customize your setup by using a variety of tools:

@itemize @bullet
@item
@cindex command line options
@dfn{Command-line options}.
Many parameters, like memory usage and the location of libraries, may be
varied by command line options.

@item
@dfn{Command scripts or batch files}.
@cindex command scripts
You might like to write scripts that invoke Scheme with your favourite
command line options.  For example, under DOS you might not have enough
memory to run edwin or the compiler with its default memory parameters
(it will print something like ``Not enough memory for this
configuration'' and halt when started), so you can write a shell script
(unix) or a @file{.bat} file (PC) that will invoke Scheme with the
appropriate @samp{-heap} and other parameters.

@item
@cindex init file
Scheme supports @dfn{init files}: if the file @file{.scheme.init} exists
in your home directory, it is loaded immediately after the
identification banner, and before the input prompt is printed.
In addition, when it starts up, edwin loads the file @file{.edwin} from
your home directory into the edwin environment. You can use both of
these files to define new procedures, commands, or change defaults in
the system.

The @code{-no-init-file} command line option causes Scheme to ignore the
@file{.scheme.init} file (@pxref{Command-Line Options}).

On PC systems these initialization files are called @file{scheme.ini}
and @file{edwin.ini} respectively and are searched for in the directory
identified by the @code{HOME} environment variable.

@item
@dfn{Environment variables}. Most microcode parameters, and some runtime
system and Edwin parameters, can be specified by means of environment
variables.  @xref{Environment Variables}.

@item
@dfn{Icons}.
@cindex icons
Under Windows and Windows NT it is possible to create icons in
the Program Manager that invoke Scheme with different parameters.
@end itemize

One of the important parameters that can be customized is how much
memory Scheme uses and how that memory is used.  Scheme uses four kinds
of memory:
@cindex memory
@cindex heap space
@cindex stack space
@cindex constant space

@itemize @bullet
@item
A @dfn{stack} which is used for recursive procedure calls,

@item
A @dfn{heap} which is used for dynamically allocated objects, like @samp{cons}
cells and strings.
Storage used for objects in the heap which become unreferenced is
eventually reclaimed by @dfn{garbage collection}.

@item
A @dfn{constant space}, which is used for allocated objects, like the
heap.
Unlike the heap, storage used for objects in constant space is not
reclaimed by garbage collection.
Constant space is used for objects that are essentially permanent, like
procedures from the runtime system.

@item
An amount of extra storage which is used by the Microcode (the part
of the system that is implemented in C).
@end itemize

@findex bchscheme
All aspects except the last may be controlled both by command-line
options and by environment variables.  MIT Scheme uses a two-space
copying garbage collector for reclaiming storage in the heap.  There are
two version of Scheme which handle garbage collection differently.
Ordinary @code{scheme} has two heaps, one for each `space'.
@code{bchscheme} has one heap and uses a disk file for the other
`space', thus trading memory usage against garbage collection speed.

The total storage required by @code{scheme} is:

@example
@var{stack} + (@var{constant} + 2*@var{heap}) + @var{extra}
@end example

@noindent
where @var{stack}, @var{constant} and @var{heap} are parameters that may
be selected when @samp{scheme} starts.
For @code{bchscheme}, which has only one heap in memory, the equation is

@example
@var{stack} + (@var{constant} + @var{heap}) + @var{extra}
@end example

Once the storage is allocated for the constant space and the heap,
Scheme will dynamically adjust the proportion of the total that is used
for constant space.  The stack and the extra microcode storage is not
included in this adjustment.  Previous versions of MIT Scheme needed to
be told the amount of constant space that was required when loading your
own bands with the @code{-band} option.  Dynamic adjustment of the heap
and constant space avoids this problem; now all that is required is that
the total space is sufficient.

The Scheme procedure @code{(print-gc-statistics)} shows how much heap
and constant space is available.

@node Command-Line Options, Environment Variables, Customizing Scheme, Running Scheme
@section Command-Line Options

Scheme accepts the command-line options detailed in the following
sections.  The options may appear in any order, with the restriction
that the microcode options must appear before the runtime options, and
the runtime options must appear before any other arguments on the
command line.  (At present, any arguments other than these options will
generate a warning message when Scheme starts.  In the future, there
will be an advertised mechanism by which the extra arguments can be
handled by user code.)

These are the microcode options:

@table @code
@item -band @var{filename}
@findex -band
@findex MITSCHEME_BAND
@cindex world image
@cindex band
Specifies the initial world image file (@dfn{band}) to be loaded.
Searches for @var{filename} in the working directory and the library
directories, using the full pathname of the first readable file of that
name.  If @var{filename} is an absolute pathname (on unix, this means it
starts with @samp{/}), then no search occurs --- @var{filename} is
tested for readability and then used directly.  If this option isn't
given, the filename is the value of the environment variable
@code{MITSCHEME_BAND}, or if that isn't defined, @file{runtime.com}; in
these cases the library directories are searched, but not the working
directory.

@item -compiler
@findex -compiler
@findex MITSCHEME_COMPILER_BAND
This option specifies defaults appropriate for loading the compiler.  It
specifies the use of large sizes, exactly like @code{-large}.  If the
@code{-band} option is also specified, that is the only effect of this
option.  Otherwise, the default band's filename is the value of the
environment variable @code{MITSCHEME_COMPILER_BAND}, if defined, or
@file{compiler.com}; the library directories are searched to locate this
file.  Note that the @code{-compiler} option is available only on
machines with compiled-code support.

@item -edwin
@findex -edwin
@findex MITSCHEME_EDWIN_BAND
This option specifies defaults appropriate for loading the editor.  It
specifies the use of large sizes, exactly like @code{-large}.  If the
@code{-band} option is also specified, that is the only effect of this
option.  Otherwise, the default band's filename is the value of the
environment variable @code{MITSCHEME_EDWIN_BAND}, if defined, or
@file{edwin.com}; the library directories are searched to locate this
file.  Note that the @code{-edwin} option is available only on machines
with compiled-code support.

@item -large
@findex -large
Specifies that large heap, constant, and stack sizes should be used.
These are specified by the environment variables

@findex MITSCHEME_LARGE_HEAP
@findex MITSCHEME_LARGE_CONSTANT
@findex MITSCHEME_LARGE_STACK
@example
MITSCHEME_LARGE_HEAP
MITSCHEME_LARGE_CONSTANT
MITSCHEME_LARGE_STACK
@end example

@noindent
If this option isn't given, the small sizes are used, specified by the
environment variables

@findex MITSCHEME_SMALL_HEAP
@findex MITSCHEME_SMALL_CONSTANT
@findex MITSCHEME_SMALL_STACK
@example
MITSCHEME_SMALL_HEAP
MITSCHEME_SMALL_CONSTANT
MITSCHEME_SMALL_STACK
@end example

@noindent
There are reasonable built-in defaults for all of these environment
variables, should any of them be undefined.  Note that any or all of the
defaults can be individually overridden by the @code{-heap},
@code{-constant}, and @code{-stack} options.

@findex print-gc-statistics
Note: the Scheme procedure @code{(print-gc-statistics)} shows how much
heap and constant space is available and in use.

@item -heap @var{blocks}
@findex -heap
Specifies the size of the heap in 1024-word blocks.  Overrides any
default.  Normally two such heaps are allocated; @code{bchscheme}
allocates only one, and uses a disk file for the other.

@item -constant @var{blocks}
@findex -constant
Specifies the size of constant space in 1024-word blocks.  Overrides any
default.  Constant space holds the compiled code for the runtime system
and other subsystems.

@item -stack @var{blocks}
@findex -stack
Specifies the size of the stack in 1024-word blocks.  Overrides any
default.  This is Scheme's stack, @emph{not} the unix stack used by C
programs.

@item -option-summary
@findex -option-summary
Causes Scheme to write an option summary to standard error.  This shows
the values of all of the settable microcode option variables.

@item -emacs
@findex -emacs
Specifies that Scheme is running as a subprocess of GNU Emacs.  This
option is automatically supplied by GNU Emacs, and should not be given
under other circumstances.

@item -interactive
@findex -interactive
If this option isn't specified, and Scheme's standard @sc{i/o} is not a
terminal, Scheme will detach itself from its controlling terminal.  This
will prevent it from getting signals sent to the process group of that
terminal.  If this option is specified, Scheme will not detach itself
from the controlling terminal.

This detaching behavior is useful for running Scheme as a background
job.  For example, using the C shell in unix, the following will run
Scheme as a background job, redirecting its input and output to files,
and preventing it from being killed by keyboard interrupts or by logging
out:

@example
scheme < /usr/cph/foo.in >& /usr/cph/foo.out &
@end example

This option only makes sense under unix.

@item -nocore
@findex -nocore
Specifies that Scheme should not generate a core dump under any
circumstances.  Under unix, if this option is not given, and Scheme
terminates abnormally, you will be prompted to decide whether a core
dump should be generated.

This option is ignored on PC versions.

@item -library @var{path}
@findex -library
@findex MITSCHEME_LIBRARY_PATH
Sets the library search path to @var{path}.  This is a
list of directories that is searched to find various library files, such
as bands.  If this option is not given, the value of the environment
variable @code{MITSCHEME_LIBRARY_PATH} is used; if that isn't defined,
the default is used.

On unix, the elements of the list are separated by colons, and the
default value is @samp{/usr/local/lib/mit-scheme}.  On PCs, the elements
of the list are separated by semicolons, and the default value is
@samp{c:\scheme}.

@item -utabmd @var{filename}
@item -utab @var{filename}
@findex -utabmd
@findex -utab
@findex MITSCHEME_UTABMD_FILE
Specifies that @var{filename} contains the microcode tables (the
microcode tables are information that informs the runtime system about
the microcode's structure).  @var{Filename} is searched for in the
working directory and the library directories.  If this option isn't
given, the filename is the value of the environment variable
@code{MITSCHEME_UTABMD_FILE}, or if that isn't defined,
@file{utabmd.bin}; in these cases the library directories are searched,
but not the working directory.

@code{-utab} is an alternate name for the @code{-utabmd} option.  At
most one of these options may be given.

@item -fasl @var{filename}
@findex -fasl
Specifies that a @dfn{cold load} should be performed, using
@var{filename} as the initial file to be loaded.  If this option isn't
given, a normal load is performed instead.  This option may not be used
together with the @code{-band} option.  This option is useful only for
maintainance and development of the MIT Scheme runtime system.
@end table

@noindent
The following options are runtime options.  They are processed after the
microcode options and after the runtime, Edwin or some other band is
loaded.

@table @code
@item -no-init-file
@findex -no-init-file
This option causes Scheme to ignore the @file{~/.scheme.init} or
@file{scheme.ini} file, normally loaded automatically when Scheme starts
(if it exists).

@item -no-suspend-file
@findex -no-suspend-file
Under some circumstances Scheme will write out a file called
@file{scheme_suspend} in the user's home directory.@footnote{On unix,
this file is written when Scheme is terminated by the @code{SIGUSR1},
@code{SIGHUP}, or @code{SIGPWR} signals.  On the PC, this file is never
written.} This file is a ``band'' containing the complete state of the
Scheme process; restoring this file continues the computation that
Scheme was performing at the time the file was written.

If the @code{-no-suspend-file} option is given, Scheme will not write a
@file{scheme_suspend} file under any circumstances.

@item -eval
@findex -eval
This option causes Scheme to evaluate the expressions following it on
the command line, up to (but not including) the next option that starts
with a hyphen.  The expressions are evaluated in the
@code{user-initial-environment}.
Unless explicitly handled, errors during evaluation are silently ignored.

@item -load
@findex -load
This option causes Scheme to load the files (or lists of files)
following it on the command line, up to (but not including) the next
option that starts with a hyphen.  The files are loaded in the
@code{user-initial-environment} using the default syntax table.
Unless explicitly handled, errors during loading are silently ignored.
@end table

@noindent
In addition to the above, @code{bchscheme} recognises the following
command line options, all of which specify parameters affecting how
@code{bchscheme} uses disk storage to do garbage collection:

@table @code
@item -gc-directory @var{directory}
@findex -gc-directory
@findex MITSCHEME_GC_DIRECTORY
Specifies that @var{directory} should be used to create files for
garbage collection.  If the option is not given, the value of
environment variable @code{MITSCHEME_GC_DIRECTORY} is used instead, and
if that is not defined, @file{/tmp} is used.

@item -gc-end-position @var{number}
@findex -gc-end-position
@findex MITSCHEME_GC_END_POSITION
It specifies the last byte position in @code{-gc-file} at which this
invocation of scheme can write.  If the option is not given, the value
of environment variable @code{MITSCHEME_GC_END_POSITION} is used
instead, and if that is not defined, it is computed from the start
position (as provided with -gc-start-position) and the heap size.  The
area of the file used (and locked if possible) is the region between
@code{-gc-start-position} and @code{-gc-end-position}.

@item -gc-file @var{filename}
@itemx -gcfile @var{filename}
@findex -gc-file
@findex -gcfile
@findex MITSCHEME_GC_FILE
Specifies that @var{filename} should be used for garbage collection.  If
the option is not given, the value of environment variable
@code{MITSCHEME_GC_FILE} is used, and if this is not defined, a unique
filename is generated in the directory specified with
@code{-gc-directory}.

@code{-gcfile} is an alias for @code{-gc-file}.  At most one of these
options should be specified.

@item -gc-keep
@findex -gc-keep
Specifies that the gc file used for garbage collection should not be
deleted when scheme terminates.
The gc file is deleted only if the file was created
by this invocation of scheme, and this option is not set.

@item -gc-start-position @var{number}
@findex -gc-start-position
@findex MITSCHEME_GC_START_POSITION
It specifies the first byte position in @code{-gc-file} at which this
invocation of scheme can write.  If the option is not given, the value
of environment variable @code{MITSCHEME_GC_START_POSITION} is used
instead, and if that is not defined, 0 is used, meaning the beginning of
the file.  The area of the file used (and locked if possible) is the
region between @code{-gc-start-position} and @code{-gc-end-position}.

@item -gc-window-size @var{blocks}
@findex -gc-window-size
@findex MITSCHEME_GC_WINDOW_SIZE
Specifies the size of the windows into new space during garbage
collection.  If this option is not given, the value of environment
variable @code{MITSCHEME_GC_WINDOW_SIZE} is used instead, and if that is
not defined, the value 16 is used.
@end table

@noindent
The following command line options are only used by an experimental
version of @code{bchscheme} that uses Unix System V-style shared memory,
and only then if the @code{gcdrone} program is installed in the lib
directory.

@table @code
@item -gc-drone @var{program}
@findex -gc-drone
@findex MITSCHEME_GC_DRONE
Specifies that @var{program} should be used as the drone program for
overlapped I/O during garbage collection.  This option is recognized
only by @code{bchscheme}.  If the option is not given, the value of
environment variable @code{MITSCHEME_GC_DRONE} is used instead, and if
that is not defined, @file{gcdrone} is used.

@item -gc-read-overlap @var{N}
@findex -gc-read-overlap
@findex MITSCHEME_GC_READ_OVERLAP
Specifies that scheme should delegate at most @var{N} simultaneous disk
read operations during garbage collection.  This option is recognized
only by @code{bchscheme}.  If the option is not given, the value of
environment variable @code{MITSCHEME_GC_READ_OVERLAP} is used instead,
and if that is not defined, 0 is used, disabling overlapped reads.

@item -gc-write-overlap @var{N}
@findex -gc-write-overlap
@findex MITSCHEME_GC_WRITE_OVERLAP
Specifies that scheme should delegate at most @var{N} simultaneous disk
write operations during garbage collection.  This option is recognized
only by @code{bchscheme}.  If the option is not given, the value of
environment variable @code{MITSCHEME_GC_WRITE_OVERLAP} is used instead,
and if that is not defined, 0 is used, disabling overlapped writes.
@end table

@node Environment Variables, Starting Scheme from Windows 3.1/NT, Command-Line Options, Running Scheme
@section Environment Variables

There are many environment variables that Scheme (and Edwin, etc.) look
for.  Environment variables that affect the microcode must be defined
before you start Scheme, but others can be defined or overwritten within
Scheme by using the @code{set-environment-variable!} procedure, e.g.@:

@example
(set-environment-variable! "EDWIN_FOREGROUND" "32")
@end example

The rest of this section is a summary of the environment variables that
are specific to MIT Scheme.  The environment variables are organised
according to the parts of MIT Scheme that they affect.

@menu
* Microcode Environment Variables::  
* Bchscheme Environment Variables::  
* PC Environment Variables::    
* Runtime Environment Variables::  
* Edwin Environment Variables::  
@end menu

@node Microcode Environment Variables, Bchscheme Environment Variables, Environment Variables, Environment Variables
@subsection Environment Variables Affecting the Microcode

These environment variables are referred to by the microcode (the
executable C programs called @file{scheme} and @file{bchscheme}).

@table @asis
@item @code{MITSCHEME_BAND} (default: @file{runtime.com} on the library path)
@findex MITSCHEME_BAND
The initial band to be loaded.  Overridden by @code{-band},
@code{-compiler}, or @code{-edwin}.

@item @code{MITSCHEME_COMPILER_BAND} (default: @file{compiler.com} on the library path)
@findex MITSCHEME_COMPILER_BAND
The initial band to be loaded if the @code{-compiler} option is given.
Overridden by @code{-band}.

@item @code{MITSCHEME_EDWIN_BAND} (default: @file{edwin.com} on the library path)
@findex MITSCHEME_EDWIN_BAND
The initial band to be loaded if the @code{-edwin} option is given.
Overridden by @code{-band}.

@item @code{MITSCHEME_LARGE_CONSTANT} (default: @samp{1000})
@findex MITSCHEME_LARGE_CONSTANT
The size of constant space, in 1024-word blocks, if the @code{-large},
@code{-compiler}, or @code{-edwin} options are given.  Overridden by
@code{-constant}.  Note: default is somewhat larger on RISC machines.

@item @code{MITSCHEME_LARGE_HEAP} (default: @samp{1000})
@findex MITSCHEME_LARGE_HEAP
The size of the heap, in 1024-word blocks, if the @code{-large},
@code{-compiler}, or @code{-edwin} options are given.  Overridden by
@code{-heap}.

@item @code{MITSCHEME_LARGE_STACK} (default: @samp{100})
@findex MITSCHEME_LARGE_STACK
The size of the stack, in 1024-word blocks, if the @code{-large},
@code{-compiler}, or @code{-edwin} options are given.  Overridden by
@code{-stack}.

@item @code{MITSCHEME_LIBRARY_PATH}
@findex MITSCHEME_LIBRARY_PATH
A list of directories.  These directories are searched,
left to right, to find bands and various other files.
On Unix systems the list is colon separated, with the default
@file{/usr/local/lib/mit-scheme}.
On PC systems the list is semi-colon separated with the default
@file{c:\scheme\lib}.

@item @code{MITSCHEME_INF_DIRECTORY}
Directory containing the debugging information files for the system. It
should contain subdirectories corresponding to the subdirectories in the
source tree.  For example, if its value is @file{f:\random}, then
runtime system debugging files will be expected in
@file{f:\random\runtime}, while edwin debugging files will be expected
in @file{f:\random\edwin}.

@item @code{MITSCHEME_SMALL_CONSTANT} (default: @samp{400})
@findex MITSCHEME_SMALL_CONSTANT
The size of constant space, in 1024-word blocks, if the size options are
not given.  Overridden by @code{-constant}, @code{-large},
@code{-compiler}, or @code{-edwin}.  Note: default is somewhat larger on
RISC machines.

@item @code{MITSCHEME_SMALL_HEAP} (default: @samp{250})
@findex MITSCHEME_SMALL_HEAP
The size of the heap, in 1024-word blocks, if the size options are not
given.  Overridden by @code{-heap}, @code{-large}, @code{-compiler}, or
@code{-edwin}.

@item @code{MITSCHEME_SMALL_STACK} (default: @samp{100})
@findex MITSCHEME_SMALL_STACK
The size of the stack, in 1024-word blocks, if the size options are not
given.  Overridden by @code{-stack}, @code{-large}, @code{-compiler}, or
@code{-edwin}.

@item @code{MITSCHEME_UTABMD_FILE} (default: @file{utabmd.bin} in the library path)
@findex MITSCHEME_UTABMD_FILE
The file containing the microcode tables.  Overridden by @code{-utabmd}
and @code{-utab}.  It is only necessary when re-building
@file{runtime.com}.
@end table

@node Bchscheme Environment Variables, PC Environment Variables, Microcode Environment Variables, Environment Variables
@subsection Environment Variables for Bchscheme

These environment variables are referred to by @file{bchscheme}
(@emph{not} by @file{scheme}).

@table @asis
@item @code{MITSCHEME_GC_DIRECTORY} (default: @file{/tmp})
@findex MITSCHEME_GC_DIRECTORY
The directory where to write gc files.  Overridden by @code{-gc-directory}.

@item @code{MITSCHEME_GC_END_POSITION} (default: start-position + heap-size)
@findex MITSCHEME_GC_END_POSITION
The last position in the gc file to use.  Overridden by
@code{-gc-end-position}.

@item @code{MITSCHEME_GC_FILE} (default: @file{GCXXXXXX})
@findex MITSCHEME_GC_FILE
The name of the file to use for garbage collection.  If it ends in 6 Xs,
the Xs are replaced by a letter and process id of the scheme process,
thus generating a unique name.  Overridden by @code{-gc-file}.

@item @code{MITSCHEME_GC_START_POSITION} (default: 0)
@findex MITSCHEME_GC_START_POSITION
The first position in the gc file to use.  Overridden by
@code{-gc-start-position}.

@item @code{MITSCHEME_GC_WINDOW_SIZE} (default: 16)
@findex MITSCHEME_GC_WINDOW_SIZE
The size in blocks of windows into new space (in the gc file).
Overridden by @code{-gc-window-size}.
@end table

@noindent
The following environment variables are only used by an experimental
version of Bchscheme that uses Unix System V-style shared memory, and
only then if the @code{gcdrone} program is installed:

@table @asis
@item @code{MITSCHEME_GC_DRONE} (default: @file{gcdrone})
@findex MITSCHEME_GC_DRONE
The program to use as the I/O drone during garbage collection.
Overridden by @code{-gc-drone}.

@item @code{MITSCHEME_GC_READ_OVERLAP} (default: 0)
@findex MITSCHEME_GC_READ_OVERLAP
The maximum number of simultaneous read operations.  Overridden by
@code{-gc-read-overlap}.

@item @code{MITSCHEME_GC_WRITE_OVERLAP} (default: 0)
@findex MITSCHEME_GC_WRITE_OVERLAP
The maximum number of simultaneous write operations.  Overridden by
@code{-gc-write-overlap}.
@end table

@node PC Environment Variables, Runtime Environment Variables, Bchscheme Environment Variables, Environment Variables
@subsection Environment Variables for the PC

These environment variables are referred to by the Windows, Windows NT,
and DOS versions of MIT Scheme.

@table @asis
@item @code{MITSCHEME_DPMI_EXT_KBD} (default: @samp{false})
@findex MITSCHEME_DPMI_EXT_KBD
DOS only.
Boolean option specifying whether Scheme inserts its own keyboard handling
routine when running under DPMI (DOS Protected Mode Interface) or Windows.

@item @code{MITSCHEME_X32_EXT_KBD} (default: @samp{false})
@findex MITSCHEME_X32_EXT_KBD
DOS only.
Boolean option specifying whether Scheme inserts its own keyboard handling
routine when @emph{not} running under DPMI or Windows.

@item @code{MITSCHEME_TRAP_ALT_TAB} (default: @samp{false})
@itemx @code{MITSCHEME_TRAP_ALT_ESCAPE} (default: @samp{false})
@findex MITSCHEME_TRAP_ALT_TAB
@findex MITSCHEME_TRAP_ALT_ESCAPE
Windows and Windows NT only.
Boolean option specifying the handling of system command accelerators.
These options do not actually work.

@item @code{MITSCHEME_GEOMETRY} (default: @samp{-1,-1,-1,-1})
@findex MITSCHEME_GEOMETRY
Windows and Windows NT only.  Four integers separated by
commas or spaces that specify the placement and size of the MIT Scheme
window as a @var{left,top,width,height} quadruple.  The units are screen
pixels, and @samp{-1} means allow the system to choose this parameter.
E.g.@:  @samp{-1,-1,500,300} places a 500 by 300 pixel window at some
system determined position on the screen.  The width and height include
the window border and title.

@item @code{MITSCHEME_FOREGROUND} (default: according to desktop color scheme)
@findex MITSCHEME_FOREGROUND
Windows and Windows NT only.  An value specifying the window
text color.  The color is specified as hex blue, green and red values
(@emph{not} RGB): e.g.@: @code{0xff0000} for blue.

@item @code{MITSCHEME_BACKGROUND} (default: according to desktop color scheme)
@findex MITSCHEME_BACKGROUND
Windows and Windows NT only.  A value specifying the window
background color.  See @code{MITSCHEME_FOREGROUND}.
@end table

@node Runtime Environment Variables, Edwin Environment Variables, PC Environment Variables, Environment Variables
@subsection Environment Variables Affecting the Runtime System

These environment variables are referred to by the runtime system.

@table @asis
@item @code{HOME}
@findex HOME
Directory where to look for init files.  E.g.@: @samp{c:\users\joe} or
@samp{/homes/joe}.

@item @code{TEMP}, @code{TMP}
@findex TMP
@findex TEMP
Directory for various temporary files.  @code{TEMP} is given preference
to @code{TMP}.
@end table

@node Edwin Environment Variables,  , Runtime Environment Variables, Environment Variables
@subsection Environment Variables Affecting Edwin

These environment variables are referred to by Edwin.

@table @asis
@item @code{EDWIN_BINARY_DIRECTORY} (default: @file{edwin/autoload} on the library path)
@findex EDWIN_BINARY_DIRECTORY
Directory where edwin expects to find files providing autoloaded
facilities.

@item @code{EDWIN_INFO_DIRECTORY} (default: @file{edwin/info} on the library path)
@findex EDWIN_INFO_DIRECTORY
Directory where edwin expects to find files for the `info' documentation
subsystem.

@item @code{EDWIN_ETC_DIRECTORY} (default: @file{edwin/etc} on the library path)
@findex EDWIN_ETC_DIRECTORY
Directory where edwin expects to find utility programs and documentation
strings.

@item @code{EDWIN_FOREGROUND} (default: none (white))
@findex EDWIN_FOREGROUND
DOS version only.
ANSI foreground color specifier. Must be a two-digit sequence in the range
30-37.  E.g.@: 32 (green).

@item @code{EDWIN_BACKGROUND} (default: none (black))
@findex EDWIN_BACKGROUND
DOS version only.
ANSI background color specifier. Must be a two-digit sequence in the range
40-47. E.g.@: 40 (black).

@item @code{TERM}
@findex TERM
Terminal type.  For DOS, should be @samp{ansi.sys} or
@samp{ibm_pc_bios}.  For Windows and Windows NT it should be
@samp{ansi.sys}, which is the default if not set.

@item @code{LINES} (default: auto-sense)
@findex LINES
Unix only.
Number of text lines on the screen, depending on the terminal type.

@item @code{MITSCHEME_LINES} (default: auto-sense or 25)
@findex MITSCHEME_LINES
DOS only.  Number of text lines on the screen, depending on the video
adapter and support software.  E.g.@: 43.

@item @code{COLUMNS} (default: auto-sense)
@findex COLUMNS
Unix only.
Number of text columns on the screen, depending on the terminal type (Unix) or
video adapter and support software (DOS).  E.g.@: 132.

@item @code{MITSCHEME_COLUMNS} (default: auto-sense, or 80)
@findex MITSCHEME_COLUMNS
DOS only.  Number of text columns on the screen, depending on the video
adapter and support software.  E.g.@: 132.
@end table

@node Starting Scheme from Windows 3.1/NT, Leaving Scheme, Environment Variables, Running Scheme
@section Starting Scheme from Windows 3.1/NT

There are two distinct versions of MIT Scheme that run on IBM
`compatible' PCs: the DOS version is a character-mode only
implementation, which can also run under Windows 3.1 as a DOS application.
The Windows version runs as a graphics-based application under
Windows 3.1 or Windows NT.
The DOS version does not run under Windows NT.

Under Windows 3.1, Scheme must be run from the Program Manager or
the File Manager.  Scheme cannot be run from the command line, because
only DOS programs can be run from the command line.
(This is the case even with WXSERVER as it appears not to work with
win32s-based programs).
Windows NT overcomes this restriction, but it is still useful to know
how to run Scheme from the Program Manager.

Once an icon is set up to run Scheme with some particular command line
options, Scheme is run by double-clicking that icon.
The rest of this section gives some tips on how to set up icons in the
Program Manager that run Scheme.  If you are unfamiliar with this
concept you should read about it under the help topic of the Program
Manager.

Under Windows NT program manager groups can be @emph{common} or
@emph{personal}.  When setting up icons in a common group it is
important to make the icons independent of the vagaries of the
environment of the user who is running them.  It is often worthwhile
doing this under Windows 3.1 and for personal groups too:

@itemize @bullet
@item
Give the icon an accurate @var{Description}.

@item
Include absolute pathnames to @code{scheme.exe} and @code{bchscheme.exe}
in the icon @var{Command line} if these executables are not in a
directory on the default @code{PATH}.

@item
Set the icon's @var{Working Directory} to: @code{%HOMEPATH%}

@item
There are several icons available --- choose one that best represents
the options given on the command line.

@item
Specifying a band that contains Edwin is not sufficient to invoke the
editor.  You also have to put

@example
-eval (edit)
@end example

at the end of the command line.
@end itemize

@node Leaving Scheme,  , Starting Scheme from Windows 3.1/NT, Running Scheme
@section Leaving Scheme

There are two ways you can leave Scheme.  The first is to evaluate

@findex exit
@lisp
(exit)
@end lisp

@noindent
which will halt the Scheme system, after first requesting confirmation.
Any information that was in the environment is lost, so this should not
be done lightly.

The second way to leave Scheme is to suspend it; when this is done you
may later restart where you left off.  Unfortunately this is not
possible in all operating systems --- currently it works only on unix
versions that support job control (i.e.@: all of the unix versions for
which we distribute Scheme), but not on PCs.

Scheme is suspended by evaluating

@findex quit
@lisp
(quit)
@end lisp

@noindent
If your system supports suspension, this will cause Scheme to stop, and
you will be returned to the operating system's command interpreter.
Scheme remains stopped, and can be continued using the job-control
commands of your command interpreter.  If your system doesn't support
suspension, this procedure does nothing.  (Calling the @code{quit}
procedure is analogous to typing Control-@code{Z}, but it allows Scheme
to respond by typing a prompt when it is unsuspended.)

@node REPL, Debugging, Running Scheme, Top
@chapter The Read-Eval-Print Loop

@cindex REPL
When you first start up Scheme from the command line (i.e not under
Edwin), you will be typing at a program called the @dfn{Read-Eval-Print
Loop} (abbreviated @dfn{REPL}).  It displays a prompt at the left hand
side of the screen whenever it is waiting for input.  You then type an
expression (terminating it with @key{RET}).  Scheme evaluates the
expression, prints the result, and gives you another prompt.

@menu
* The Prompt and Level Number::  
* Interrupting::                
* Restarting::                  
* The Current REPL Environment::  
@end menu

@node The Prompt and Level Number, Interrupting, REPL, REPL
@section The Prompt and Level Number

@cindex prompt, REPL
The @sc{repl} @dfn{prompt} normally has the form

@example
1 ]=>
@end example

@cindex level number, REPL
@noindent
The @samp{1} in the prompt is a @dfn{level number}, which is always a
positive integer.  This number is incremented under certain
circumstances, the most common being an error.  For example, here is
what you will see if you type @kbd{f o o @key{RET}} after starting
Scheme:

@example
;Unbound variable: foo
;To continue, call RESTART with an option number:
; (RESTART 3) => Specify a value to use instead of foo.
; (RESTART 2) => Define foo to a given value.
; (RESTART 1) => Return to read-eval-print level 1.

2 error> 
@end example

@noindent
In this case, the level number has been incremented to @samp{2}, which
indicates that a new @sc{repl} has been started (also the prompt string
has been changed to remind you that the @sc{repl} was started because of
an error).  The @samp{2} means that this new @sc{repl} is ``over'' the
old one.  The original @sc{repl} still exists, and is waiting for you to
return to it, for example, by entering @code{(restart 1)}.  Furthermore,
if an error occurs while you are in this @sc{repl}, yet another
@sc{repl} will be started, and the level number will be increased to
@samp{3}.  This can continue ad infinitum, but normally it is rare to
use more than a few levels.

The normal way to get out of an error @sc{repl} and back to the top
level @sc{repl} is to use the @kbd{C-g} interrupt.  This is a
single-keystroke command executed by holding down the @key{CTRL} key and
pressing the @key{G} key.  @kbd{C-g} always terminates whatever is
running and returns you to the top level @sc{repl} immediately.

Note: The appearance of the @samp{error>} prompt does not mean that
Scheme is in some weird inconsistent state that you should avoid.  It is
merely a reminder that your program was in error: an illegal operation
was attempted, but it was detected and avoided.  Often the best way to
find out what is in error is to do some poking around in the error
@sc{repl}.  If you abort out of it, the context of the error will be
destroyed, and you may not be able to find out what happened.

@node Interrupting, Restarting, The Prompt and Level Number, REPL
@section Interrupting

@kindex C-g
@kindex C-c
Scheme has two interrupt keys under unix: @kbd{C-g} and @kbd{C-c}.  
Other systems, like the PC, may have more than two.
The PC version has @kbd{C-b}, @kbd{C-x}, and @kbd{C-u} as well as
@kbd{C-g} and @kbd{C-c}.
The @kbd{C-g} key stops any Scheme
evaluation that is running and returns you to the top level @sc{repl}.
@kbd{C-c} prompts you for another character and performs some action
based on that character.  It is not necessary to type @key{RET} after
@kbd{C-g} or @kbd{C-c}, nor is it needed after the character that
@kbd{C-c} will ask you for.

Here are the more common options for @kbd{C-c}.

@table @kbd
@item C-c i
@kindex C-c i
Ignore the interrupt.  Type this if you made a mistake and didn't
really mean to type @kbd{C-c}.

@item C-c ?
@kindex C-c ?
Print help information.  This will describe any other options not
documented here.

@item C-c q
@kindex C-c q
@findex exit
Similar to typing @code{(exit)} at the @sc{repl}, except that it works
even if Scheme is running an evaluation, and does not request
confirmation.

@item C-c z
@kindex C-c z
@findex quit
Similar to typing @code{(quit)} at the @sc{repl}, except that it works
even if Scheme is running an evaluation.

@item C-c C-c
@kindex C-c C-c
Identical to typing @kbd{C-g}.  If no evaluation is running, this is
equivalent to evaluating

@findex cmdl-interrupt/abort-top-level
@lisp
(cmdl-interrupt/abort-top-level)
@end lisp

@noindent
@kindex C-c C-g
@kindex C-c g
The options @kbd{C-c C-g} and @kbd{C-c g}, supplied for compatibility
with older implementations, are equivalent to @kbd{C-c C-c}.

@item C-c C-x
@kindex C-c C-x
Abort whatever Scheme evaluation is currently running and return to the
``current'' @sc{repl}.  If no evaluation is running, this is equivalent
to evaluating

@findex cmdl-interrupt/abort-nearest
@lisp
(cmdl-interrupt/abort-nearest)
@end lisp

@kindex C-c x
The option @kbd{C-c x}, supplied for compatibility with older
implementations, is equivalent to @kbd{C-c C-x}.

@kindex C-x
On the PC version @kbd{C-x} is equivalent to @kbd{C-c C-x}.

@item C-c C-u
@kindex C-c C-u
Abort whatever Scheme evaluation is running and go up one level.  If you
are already at level number 1, it just aborts the evaluation, leaving
you at level 1.  If no evaluation is running, this is equivalent to
evaluating

@findex cmdl-interrupt/abort-previous
@lisp
(cmdl-interrupt/abort-previous)
@end lisp

@kindex C-c u
The option @kbd{C-c u}, supplied for compatibility with older
implementations, is equivalent to @kbd{C-c C-u}.

@kindex C-u
On the PC version @kbd{C-u} is equivalent to @kbd{C-c C-u}.

@item C-c C-b
@kindex C-c C-b
@cindex breakpoint
Suspend whatever Scheme evaluation is running and start a
@dfn{breakpoint} @sc{repl}.  The evaluation can be resumed by evaluating

@findex proceed
@lisp
(proceed)
@end lisp

@noindent
in that @sc{repl} at any time.

@kindex C-c b
The option @kbd{C-c b}, supplied for compatibility with older
implementations, is equivalent to @kbd{C-c C-b}.

@kindex C-b
On the PC version @kbd{C-b} is equivalent to @kbd{C-c C-b}.
@end table

@node Restarting, The Current REPL Environment, Interrupting, REPL
@section Restarting

Another way of exiting a @sc{repl} is to use the @code{restart}
procedure:

@deffn {procedure+} restart [K]
@cindex REPL, restarting from
This procedure selects and invokes a @dfn{restart method}.  The list of
restart methods is different for each @sc{repl}; in the case of an error
@sc{repl}, this list is printed when the @sc{repl} is started:

@example
@group
;Unbound variable: foo
;To continue, call RESTART with an option number:
; (RESTART 3) => Specify a value to use instead of foo.
; (RESTART 2) => Define foo to a given value.
; (RESTART 1) => Return to read-eval-print level 1.

2 error> 
@end group
@end example

If the @var{k} argument is given, it must be a positive integer index
into the list (in this example it must be between one and three
inclusive).  The integer @var{k} selects an item from the list and
invokes it.  If @var{k} is not given, @code{restart} prints the list and
prompts for the integer index:

@example
@group
2 error> (restart)
;Choose an option by number:
;  3: Specify a value to use instead of foo.
;  2: Define foo to a given value.
;  1: Return to read-eval-print level 1.

Option number:
@end group
@end example

The simplest restart methods just perform their actions.  For example:

@example
@group
2 error> (restart 1)
;Abort!

1 ]=>
@end group
@end example

Other methods will prompt for more input before continuing:

@example
@group
2 error> (restart)
;Choose an option by number:
;  3: Specify a value to use instead of foo.
;  2: Define foo to a given value.
;  1: Return to read-eval-print level 1.

Option number: 3

Value to use instead of foo: '(a b)
;Value: (a b)

1 ]=>
@end group
@end example
@end deffn

@node The Current REPL Environment,  , Restarting, REPL
@section The Current REPL Environment

@cindex current REPL environment
@findex user-initial-environment
@findex system-global-environment
Every @sc{repl} has a @dfn{current environment}, which is the place
where expressions are evaluated and definitions are stored.  When Scheme
is started, this environment is the value of the variable
@code{user-initial-environment}.  There are a number of other
environments in the system, for example
@code{system-global-environment}, where the runtime system's bindings
are stored.

You can get the current @sc{repl} environment by evaluating

@findex nearest-repl/environment
@lisp
(nearest-repl/environment)
@end lisp

There are several other ways to obtain environments.  For example, if
you have a procedure object, you can get a pointer to the environment in
which it was closed by evaluating

@findex procedure-environment
@lisp
(procedure-environment @var{procedure})
@end lisp

Your programs create new environments whenever a procedure is called.

Here is the procedure that changes the @sc{repl}'s environment:

@deffn {procedure+} ge environment
Changes the current @sc{repl} environment to be @var{environment}
(@code{ge} stands for ``Goto Environment'').  @var{Environment} is
allowed to be a procedure as well as an environment object.  If it is a
procedure, then the closing environment of that procedure is used in its
place.
@end deffn

@deffn {procedure+} gst syntax-table
In addition to the current environment, each @sc{repl} maintains a
current @dfn{syntax table}.  The current syntax table tells the
@sc{repl} which keywords are used to identify special forms (e.g.@:
@code{if}, @code{lambda}).  If you write macros, often you will want to
make your own syntax table, in which case it is useful to be able to
make that syntax table be the current one.  @code{gst} allows you to do
that.
@end deffn

@node Debugging, Loading Files, REPL, Top
@chapter Debugging

@strong{This chapter is out of date and currently under revision}.

This chapter is adapted from @cite{Don't Panic: A 6.001 User's Guide to
the Chipmunk System}, by Arthur A. Gleckler.

@cindex bugs
@cindex debugging
Even computer software that has been planned carefully and written well
may not always work correctly.  Mysterious creatures called @dfn{bugs}
may creep in and wreak havoc, leaving the programmer to clean up the
mess.  Some have theorized that a program fails only because its author
made a mistake, but experienced computer programmers know that bugs are
always to blame.  This is why the task of fixing broken computer
software is called @dfn{debugging}.

It is impossible to prove the correctness of any non-trivial program;
hence the Cynic's First Law of Debugging:

@quotation
Programs don't become more reliable as they are debugged; the bugs just
get harder to find.
@end quotation

@cindex breakpoints
Scheme is equipped with a variety of special software for finding and
removing bugs.  The debugging tools include facilities for tracing a
program's use of specified procedures, for examining Scheme
environments, and for setting @dfn{breakpoints}, places where the
program will pause for inspection.

@cindex error
Many bugs are detected when programs try to do something which is
impossible, like adding a number to a symbol, or using a variable which
does not exist; this type of mistake is called an @dfn{error}.
Whenever an error occurs, Scheme prints an error message and starts a
new @sc{repl}.  For example, using a nonexistent variable @code{foo} will
cause Scheme to respond

@example
1 ]=> foo

;Unbound variable: foo
;To continue, call RESTART with an option number:
; (RESTART 3) => Specify a value to use instead of foo.
; (RESTART 2) => Define foo to a given value.
; (RESTART 1) => Return to read-eval-print level 1.

2 error> 
@end example

Sometimes, a bug will never cause an error, but will still cause the
program to operate incorrectly.  For instance,

@lisp
(prime? 7)   @result{}   #f
@end lisp

In this situation, Scheme does not know that the program is misbehaving.
The programmer must notice the problem and, if necessary, start the
debugging tools manually.

There are several approaches to finding bugs in a Scheme program:

@itemize @bullet
@item
Inspect the original Scheme program.

@item
Use the debugging tools to follow your program's progress.

@item
Edit the program to insert checks and breakpoints.
@end itemize

@noindent
Only experience can teach how to debug programs, so be sure to
experiment with all these approaches while doing your own debugging.
Planning ahead is the best way to ward off bugs, but when bugs do
appear, be prepared to attack them with all the tools available.

@menu
* Subproblems and Reductions::  
* Debugger::                    
* Debugging Aids::              
* Advising Procedures::         
@end menu

@node Subproblems and Reductions, Debugger, Debugging, Debugging
@section Subproblems and Reductions

@cindex subproblem
@cindex reduction
@cindex subexpression
Understanding the concepts of @dfn{reduction} and @dfn{subproblem} is
essential to good use of the debugging tools.  The Scheme interpreter
evaluates an expression by @dfn{reducing} it to a simpler expression.
In general, Scheme's evaluation rules designate that evaluation proceeds
from one expression to the next by either starting to work on a
@dfn{subexpression} of the given expression, or by reducing the entire
expression to a new (simpler, or reduced) form.  Thus, a history of the
successive forms processed during the evaluation of an expression will
show a sequence of subproblems, where each subproblem may consist of a
sequence of reductions.

For example, both @code{(+ 5 6)} and @code{(+ 7 9)} are subproblems of
the following combination:

@lisp
(* (+ 5 6) (+ 7 9))
@end lisp

If @code{(prime? n)} is true, then @code{(cons 'prime n)} is a reduction
for the following expression:

@lisp
(if (prime? n)
    (cons 'prime n)
    (cons 'not-prime n))
@end lisp

This is because the entire subproblem of the @code{if} expression can
be reduced to the problem @code{(cons 'prime n)}, once we know that
@code{(prime?  n)} is true; the @code{(cons 'not-prime n)} can be
ignored, because it will never be needed.  On the other hand, if
@code{(prime? n)} were false, then @code{(cons 'not-prime n)} would be
the reduction for the @code{if} expression.

The @emph{subproblem level} is a number representing how far back in the
history of the current computation a particular evaluation is.  Consider
@code{factorial}:

@lisp
(define (factorial n)
  (if (< n 2)
      1
      (* n (factorial (- n 1)))))
@end lisp

@noindent
If we stop @code{factorial} in the middle of evaluating @code{(- n 1)},
the @code{(- n 1)} is at subproblem level 0.  Following the history of
the computation ``upwards,'' @code{(factorial (- n 1))} is at subproblem
level 1, and @code{(* n (factorial (- n 1)))} is at subproblem level 2.
These expressions all have @emph{reduction number} 0.  Continuing
upwards, the @code{if} expression has reduction number 1.

Moving backwards in the history of a computation, subproblem levels and
reduction numbers increase, starting from zero at the expression
currently being evaluated.  Reduction numbers increase until the next
subproblem, where they start over at zero.  The best way to get a feel
for subproblem levels and reduction numbers is to experiment with the
debugging tools, especially @code{debug}.

@node Debugger, Debugging Aids, Subproblems and Reductions, Debugging
@section The Debugger

@cindex debugger
@cindex continuation Browser
@cindex browser, Continuation
@findex debug
There are three debuggers available with MIT Scheme.  Two of them
require and run under Edwin, and are described in that section of this
document (@pxref{Edwin}).  The third is command oriented, does not
require Edwin, and is described here.

The @dfn{debugger}, called @code{debug}, is the tool you should use when
Scheme signals an error and you want to find out what caused the error.
When Scheme signals an error, it records all the information necessary
to continue running the Scheme program that caused the error; the
debugger provides you with the means to inspect this information.  For
this reason, the debugger is sometimes called a @dfn{continuation
browser}.

Here is the transcript of a typical Scheme session, showing a user
evaluating the expression @code{(fib 10)}, Scheme responding with an
unbound variable error for the variable @code{fob}, and the user
starting the debugger:

@example
1 ]=> (fib 10)

;Unbound variable: fob
;To continue, call RESTART with an option number:
; (RESTART 3) => Specify a value to use instead of fob.
; (RESTART 2) => Define fob to a given value.
; (RESTART 1) => Return to read-eval-print level 1.

2 error> (debug)

There are 6 subproblems on the stack.

Subproblem level: 0 (this is the lowest subproblem level)
Expression (from stack):
    fob
Environment created by the procedure: FIB
 applied to: (10)
The execution history for this subproblem contains 1 reduction.
You are now in the debugger.  Type q to quit, ? for commands.

3 debug> 
@end example

@noindent
@cindex execution history
This tells us that the error occurred while trying to evaluate the
expression @code{fob} while running @code{(fib 10)}.  It also tells us
this is subproblem level 0, the first of 8 subproblems that are
available for us to examine.  The expression shown is marked ``(from
stack)'', which tells us that this expression was reconstructed from the
interpreter's internal data structures.  Another source of information
is the @dfn{execution history}, which keeps a record of expressions
evaluated by the interpreter.  The debugger informs us that the
execution history has recorded some information for this subproblem,
specifically a description of one reduction.

@node Debugging Aids, Advising Procedures, Debugger, Debugging
@section Debugging Aids

An important step in debugging is to locate the piece of code from which
the error is signalled.  The Scheme debugger contains a history examiner
and an environment examiner to aid the user in locating a bug.

@deffn {special form+} bkpt message irritant
Sets a breakpoint.  When the breakpoint is encountered, @var{message}
and @var{irritant} are typed and a read-eval-print loop is entered in
the current environment.  To exit from the breakpoint and proceed with
the interrupted process, call the procedure @code{proceed}.  Sample
usage:

@example
1 ]=> (begin (write-line 'foo)
             (bkpt 'test-2 'test-3)
             (write-line 'bar)
             'done)

foo
 test-2 test-3
;To continue, call RESTART with an option number:
; (RESTART 2) => Return from BKPT.
; (RESTART 1) => Return to read-eval-print level 1.

2 bkpt> (+ 3 3)

;Value: 6

2 bkpt> (proceed)

bar
;Value: done
@end example
@end deffn

@deffn {procedure+} where [obj]
The procedure @code{where} enters the environment examination system.
This allows environments and variable bindings to be examined and
modified.  @code{where} accepts one letter commands.  The commands can
be found by typing @kbd{?} to the @samp{where>} prompt.  The optional
argument, @var{obj}, is an object with an environment associated with
it: an environment, a procedure, or a promise.  If @var{obj} is omitted,
the environment examined is the read-eval-print environment from which
@code{where} was called (or an error or breakpoint environment if called
from the debugger).  If a compound procedure is supplied, @code{where}
lets the user examine the environment of definition of the procedure.
This is useful for debugging procedure arguments and values.
@end deffn

@node Advising Procedures,  , Debugging Aids, Debugging
@section Advising Procedures

Giving advice to procedures is a powerful debugging technique.
@code{trace} and @code{break} are useful examples of advice-giving
procedures.
Note that the advice system only works for interpreted procedures.

@deffn {procedure+} trace-entry proc
Causes an informative message to be printed whenever the procedure
@var{proc} is entered.  The message is of the form

@example
[Entering #[compound-procedure 1 foo]
    Args: @var{val1}
          @var{val2}
          ...]
@end example

where @var{val1}, @var{val2} etc.@: are the evaluated arguments supplied
to the procedure.
@end deffn

@deffn {procedure+} trace-exit proc
Causes and informative message to be printed when procedure @var{proc}
terminates.  The message contains the procedure, its argument values,
and the value returned by the procedure.
@end deffn

@deffn {procedure+} trace-both proc
@deffnx {procedure+} trace proc
@code{trace-both} is the same as calling both @code{trace-entry} and
@code{trace-exit} on @var{proc}.
@code{trace} is the same as @code{trace-both}.
@end deffn

@deffn {procedure+} untrace-entry [proc]
@code{untrace-entry} stops tracing the entry of @var{proc}.
If @var{proc} is not given, the
default is to stop tracing the entry of all entry-traced procedures.
@end deffn

@deffn {procedure+} untrace-exit [proc]
Stops tracing the exit of @var{proc}.  If @var{proc} is not included,
the default is all exit-traced procedures.
@end deffn

@deffn {procedure+} untrace [proc]
Stops tracing both the entry to and the exit from @var{proc}.  If
@var{proc} is not given, the default is all traced procedures.
@end deffn

@deffn {procedure+} break-entry proc
Like @code{trace-entry} with the additional effect that a breakpoint is
entered when procedure @var{proc} is invoked.  Both @var{proc} and its
arguments can be accessed by calling the procedures @code{*proc*} and
@code{*args*}, respectively.
Use @code{restart} or @code{proceed} to continue from a breakpoint.
@end deffn

@deffn {procedure+} break-exit proc
Like @code{trace-exit}, except that a breakpoint is entered just prior
to leaving the procedure @var{proc}.  @var{Proc}, its arguments, and the
result can be accessed by calling the procedures @code{*proc*},
@code{*args*}, and @code{*result*}, respectively.
Use @code{restart} or @code{proceed} to continue from a breakpoint.
@end deffn

@deffn {procedure+} break-both proc
@deffnx {procedure+} break proc
Sets a breakpoint at the beginning and end of @var{proc}.  This is
@code{break-entry} and @code{break-exit} combined.
@end deffn

@deffn {procedure+} unbreak [proc]
Discontinues the entering of a breakpoint on the entry to and exit from
the procedure @var{proc}.  If @var{proc} is not given, the default is
all breakpointed procedures.
@end deffn

@deffn {procedure+} unbreak-entry [proc]
Discontinues the entering of a breakpoint on the entry to the procedure
@var{proc}.  If @var{proc} is not given, the default is all
entry-breakpointed procedures.
@end deffn

@deffn {procedure+} unbreak-exit [proc]
Discontinues the entering of a breakpoint on the exit from the procedure
@var{proc}.  If @var{proc} is not given, the default is all
exit-breakpointed procedures.
@end deffn

@deffn {procedure+} advise-entry proc advice
General entry-advising procedure.  @code{trace-entry} and
@code{break-entry} are examples of entry-advising procedures.
@code{advise-entry} gives @var{advice} to @var{proc}. When @var{proc}
is invoked, @var{advice} is passed three arguments: @var{proc}, a list
of @var{proc}'s argument values, and the current environment.
@end deffn

@deffn {procedure+} advise-exit proc advice
The general exit-advising procedure.  @code{trace-exit} and
@code{break-exit} are examples of exit-advising procedures.
@var{Advice} is a procedure that should accept four arguments:
@var{proc}, its argument values, the result computed by @var{proc}, and
the current environment.  @var{Advice} is responsible for returning a
value on behalf of @var{proc}.  That is, the value returned by
@var{advice} is the value returned by the advised procedure.
@end deffn

@deffn {procedure+} advice proc
Returned the advice, if any, given to @var{proc}.
@end deffn

@deffn {procedure+} unadvise-entry [proc]
Removes entry advice from @var{proc}. If @var{proc} is not given, the
default is all entry-advised procedures.
@end deffn

@deffn {procedure+} unadvise-exit [proc]
Removes exit advice from @var{proc}. If @var{proc} is not given, the
default is all exit-advised procedures.
@end deffn

@deffn {procedure+} unadvise [proc]
Removes all advice from @var{proc}. This is a combination of
@code{unadvise-entry} and @code{unadvise-exit}. If @var{proc} is not
given, the default is all advised procedures.
@end deffn

@deffn {procedure+} *proc*
@code{*proc*} is a procedure which returns as its value the ``broken''
procedure.  It is used only at a breakpoint set by the procedures
@code{break-exit} and @code{break-entry} or procedures defined in terms
of these procedures (like @code{break-both} and @code{break}).
@end deffn

@deffn {procedure+} *args*
@code{*args*} is a procedure which returns as its value a list of the
arguments supplied to the ``broken'' procedure.  It is used only at a
breakpoint set by the procedures @code{break-exit} and
@code{break-entry} or procedures defined in terms of these procedures
(like @code{break-both} and @code{break}).
@end deffn

@deffn {procedure+} *result*
@code{*result*} is a procedure which returns as its value the result that
was about to be returned by the ``broken'' procedure. It is used only at
a breakpoint set by the procedure @code{break-exit} or procedures
defined in terms of this procedure (like @code{break-both} and
@code{break}).
@end deffn

@node Loading Files, World Images, Debugging, Top
@chapter Loading Files

To load files of Scheme code, use the procedure @code{load}:

@deffn {procedure} load filename [environment [syntax-table]]
@var{Filename} may be a string naming a file, or a list of strings
naming many files.  @var{Environment}, if given, is the environment to
evaluate the file in; if not given the current @sc{repl} environment is
used.  Likewise @var{syntax-table} is the syntax table to use.

@findex pathname-type
@code{load} determines whether the file to be loaded is binary or source
code, and performs the appropriate action.  By convention, files of
source code have a pathname type of @code{"scm"}, and files of binary
SCode have pathname type @code{"bin"}.  Native-code binaries have
pathname type @code{"com"}.  (See the description of
@code{pathname-type} in the reference manual.)
@end deffn

@defvr {variable+} load-noisily?
If @code{load-noisily?} is set to @code{#t}, @code{load} will print the
value of each expression in the file as it is evaluated.  Otherwise,
nothing is printed except for the value of the last expression in the
file.  (Note: the noisy loading feature is implemented for source-code
files only.)
@end defvr

@defvr {variable+} load/default-types
When load is given a pathname without a type, it uses the value of this
variable to determine what pathname types to look for and how to load
the file.  @code{load/default-types} is a list of associations that maps
pathname types (strings) to loader procedures.  @code{load} tries the
pathname types in the order that they appear in the list.  The initial
value of this variable has pathname types in this order:

@lisp
"com" "so" "sl" "bin" "scm"
@end lisp

This means that, for example, @code{(load "foo")} will try to load
@file{foo.com} first, and @file{foo.scm} only after looking for and
failing to find the other pathname types.
@end defvr

@cindex working directory
@findex pwd
@findex cd
All pathnames are interpreted relative to a working directory, which is
initialized when Scheme is started.  The working directory can be
obtained from the procedure @code{pwd} or modified by the procedure
@code{cd}; see the reference manual for details.  Files may be loaded
when Scheme first starts; see the @code{-load} command line option for
details.

@node World Images, Garbage Collection, Loading Files, Top
@chapter World Images

@cindex world image
@cindex band
A @dfn{world image} is a file that contains a complete Scheme system,
perhaps additionally including user application code.  Scheme provides
two methods for saving and restoring world images.  The first method
writes a file containing all of the Scheme code in the world, which is
called a @dfn{band}.  The file @file{runtime.com} that is loaded by the
microcode is just such a band.
To make your own band, use the procedure
@code{disk-save}.

@deffn {procedure+} disk-save filename [identify]
Causes a band to be written to the file specified by @var{filename}.
The optional argument @var{identify} controls what happens when that
band is restored, as follows:

@table @asis
@item not specified
Start up in the top-level @sc{repl}, identifying the world in the normal
way.

@item a string
Do the same thing except print that string instead of @samp{Scheme} when
restarting.

@item the constant @code{#t}
Restart exactly where you were when the call to @code{disk-save} was
performed.  This is especially useful for saving your state when an
error has occurred and you are not in the top-level @sc{repl}.

@item the constant @code{#f}
Just like @code{#t}, except that the runtime system will not perform
normal restart initializations; in particular, it will not load your
init file.
@end table
@end deffn

@findex disk-restore
To restore a saved band, give the @code{-band} option when starting
Scheme.  Alternatively, evaluate @code{(disk-restore @var{filename})}
from a running Scheme, which will destroy the current world, replacing
it with the saved world.  The argument to @code{disk-restore} may be
omitted, in which case it defaults to the filename from which the
current world was last restored.

Note: with the C back-end, @code{disk-save} is not very useful.  The
reason is that compiled procedures are compiled C code that has been
dynamically linked in, and @code{disk-save} does not save any C
procedures.  If you need to build a band for a C back-end system, please
contact us.  Your system is a C back-end system if the following
expression does not evaluate to @code{#f}:

@example
(system-library-directory-pathname "shared")
@end example

Note: when restoring a saved band, the Scheme executable must be
configured with a large enough constant space and heap to hold the
band's contents.  If you attempt to restore a band using the
@code{-band} option, and the band is too large, Scheme will write an
error message that tells you the appropriate command-line options needed
to load that band.  If you attempt restore a too-large band using
@code{disk-restore}, Scheme will signal an error, but will not provide
the configuration information.  In general, the configuration that was
used to save a band is sufficiently large to restore it.

@findex dump-world
Another method for saving the world is the @code{dump-world} procedure,
which accepts the same arguments as @code{disk-save} and works in much
the same way.  However, rather than dumping a band, @code{dump-world}
saves an executable image, which is started just like any other program.
This has the advantage of being considerably faster to start on some
systems, but the image file is typically much larger than the
corresponding band.  However, @code{dump-world} is only supported for a
few operating systems, and is not built into the distributed executable
files --- if you wish to use @code{dump-world}, you must build your own
executable file from the source code.
Note that @code{dump-world} is unlikely to work with this release as MIT
Scheme now uses shared libraries.

@node Garbage Collection, Compiling Files, World Images, Top
@chapter Garbage Collection

This section describes procedures that control garbage collection.  See
@pxref{Customizing Scheme} for a discussion of how MIT Scheme uses
memory.

@deffn {procedure+} gc-flip [safety-margin]
Forces a garbage collection to occur.  Returns the number of words of
available storage after collection.

@var{Safety-margin} determines the number of words of storage available
for system tasks in-between detecting the need for a garbage collection
and entering the garbage collector proper.  An example of such a system
task is changing the run-light to show `gc' when scheme is running under
Emacs.
@end deffn

@deffn {procedure+} set-gc-notification! on?
Controls whether the user is notified of garbage collections.  If
@var{on?} is @code{#F}, the user is not notified, otherwise the user is
notified.  The default is no notification.

The notification appears as a single line like the following, showing
how many garbage collections have occured, the time taken to perform the
garbage collection and the free storage remaining (in words) after
collection.

@example
GC 5: took:   0.50   (8%) CPU time,   0.70   (2%) real time; free: 364346
@end example

To operate comfortably, the amount of free storage after garbage
collection should be a substantial proportion of the heap size.  If the
percentage CPU time is consistently high (over 20%), you should consider
running with a larger heap.  A rough rule of thumb to halve the GC
overhead is to take the amount of free storage, divide by 1000, and add
this figure to the current value used for the @samp{-heap} command line
option.  Unfortunately there is no way to adjust the heap size without
restarting Scheme.
@end deffn

@deffn purify item [pure-space? [queue?]]
@deffnx flush-purification-queue!
** We should say something about these **
@end deffn


@node Compiling Files, GNU Emacs Interface, Garbage Collection, Top
@chapter Compiling Files

Note: the procedures described in this section are only available in the
@file{compiler.com} world image.  Furthermore, @code{cf} is only
available on machines that support native-code compilation.

@menu
* Compilation Procedures::      
* Declarations::                
* Efficiency Tips::             
@end menu

@node Compilation Procedures, Declarations, Compiling Files, Compiling Files
@section Compilation Procedures

@deffn {procedure+} cf filename [destination]
This is the program that transforms a source-code file into native-code
binary form.  If @var{destination} is not given, as in

@lisp
(cf "foo")
@end lisp

@noindent
@code{cf} compiles the file @file{foo.scm}, producing the file
@file{foo.com} (incidentally it will also produce @file{foo.bin},
@file{foo.bci}, and possibly @file{foo.ext}).  If you later evaluate

@lisp
(load "foo")
@end lisp

@noindent
@file{foo.com} will be loaded rather than @file{foo.scm}.

If @var{destination} is given, it says where the output files should go.
If this argument is a directory, they go in that directory, e.g.:

@lisp
(cf "foo" "../bar/")
@end lisp

@noindent
will take @file{foo.scm} and generate the file @file{../bar/foo.com}.
If @var{destination} is not a directory, it is the root name of the
output:

@lisp
(cf "foo" "bar")
@end lisp

@noindent
takes @file{foo.scm} and generates @file{bar.com}.
@end deffn

About the @file{.bci} files: these files contain the debugging
information that Scheme uses when you call @code{debug} to examine
compiled code.  When you load a @file{.com} file, Scheme remembers where
it was loaded from, and when the debugger (or @code{pp}) looks at the
compiled code from that file, it attempts to find the @file{.bci} file
in the same directory from which the @file{.com} file was loaded.  Thus
it is a good idea to leave these files together.

@file{.bci} files are stored in a compressed format.
The debugger has to uncompress the files when it looks at them,
and on a slow machine this can take a noticeable time.
The system takes steps to reduce the impact of this behaviour:
debugging information is cached in memory,
and uncompressed versions of @file{.bci} files are kept around.
The default behavior is that a temporary file is created and the
@file{.bci} file is uncompressed into it.  The temporary file is kept
around for a while afterwards, and during that time if the uncompressed
@file{.bci} file is needed the temporary file is used.  Each such
reference updates an `access time' that is associated with the temporary
file.  The garbage collector checks the access times of all such
temporary files, and deletes any that have not been accessed in five
minutes or more.  All of the temporaries are deleted automatically when
the Scheme process is killed.

Two other behaviors are available.  One of them uncompresses the @file{.bci}
file each time it is referenced, and the other uncompresses the @file{.bci}
file and writes it back out as a @file{.bif} file (the old default).
The @file{.bif} file remains after Scheme exits.
The time interval and the behavior are controlled by variables.  (These
variables are not in the global environment; perhaps they should be.
They are in the @code{(runtime compiler-info)} package environment.)

@defvr {variable+} *save-uncompressed-files?*
This variable affects what happens when @file{.bci} files are
uncompressed.  It allows a trade-off between performance and disk space.
There are three possible values:

@table @code
@item #f
The uncompressed versions of @file{.bci} files are never saved.  Each
time the information is needed the @file{.bci} file is uncompressed.
This option requires the minimum amount of disk space and is the
slowest.

@item automatic
Uncompressed versions of @file{.bci} files are kept as temporary files.
The temporary files are deleted when Scheme exits, and if they have not
been used for a while.  This is the default.

@item #t
The @file{.bci} files are uncompressed to permanent @file{.bif} files.
These files remain on disk after Scheme exits, and are rather large -
about twice the size of the corresponding @file{.bci} files.  If you
choose this option and you are running out of disk space you may delete
the @file{.bif} files.  They will be regenerated as needed.
@end table
@end defvr

@defvr {variable+} *uncompressed-file-lifetime*
The minimum length of time that a temporary uncompressed version of
a @file{.bci} file will stay on disk after it is last used.
The time is in milliseconds; the default is @samp{300000} (five
minutes).
@end defvr

@defvr {variable+} load-debugging-info-on-demand?
If this variable is @file{#f}, then printing a compiled procedure
will print the procedure's name only if the debugging information for
that procedure is already loaded.  Otherwise, it will force the
loading of the debugging information.
The default value is @code{#f}.
@end defvr

@deffn {procedure+} sf filename [destination]
@code{sf} is the program that transforms a source-code file into binary
SCode form; it is used on machines that do not support native-code
compilation.  It performs numerous optimizations that can make your
programs run considerably faster than unoptimized interpreted code.
Also, the binary files that it generates load very quickly compared to
source-code files.

The simplest way to use @code{sf} is just to say:

@lisp
(sf @var{filename})
@end lisp

@noindent
This will cause your file to be transformed, and the resulting binary
file to be written out with the same name, but with pathname type
@code{"bin"}.  If you do not specify a pathname type on the input file,
@code{"scm"} is assumed.

Like @code{load}, the first argument to @code{sf} may be a list of
filenames rather than a single filename.

@code{sf} takes an optional second argument, which is the filename of
the output file.  If this argument is a directory, then the output file
has its normal name but is put in that directory instead.
@end deffn

@node Declarations, Efficiency Tips, Compilation Procedures, Compiling Files
@section Declarations
@cindex declarations

Several declarations can be added to your programs to help @code{cf} and
@code{sf} make them more efficient.

@menu
* Standard Names::              
* In-line Coding::              
* Replacement of Operators::    
* Reduction of Operators::      
@end menu

@node Standard Names, In-line Coding, Declarations, Declarations
@subsection Standard Names

Normally, all files have a line

@findex usual-integrations
@lisp
(declare (usual-integrations))
@end lisp

@noindent
near their beginning, which tells the compiler that free variables whose
names are defined in @code{system-global-environment} will not be
shadowed by other definitions when the program is loaded.  If you
redefine some global name in your code, for example @code{car},
@code{cdr}, and @code{cons}, you should indicate it in the declaration:

@lisp
(declare (usual-integrations car cdr cons))
@end lisp

You can obtain an alphabetically-sorted list of the names that the
@code{usual-integrations} declaration affects by evaluating the
following expression:

@lisp
(eval '(sort (append usual-integrations/constant-names
                     usual-integrations/expansion-names)
             (lambda (x y)
               (string<=? (symbol->string x)
                          (symbol->string y))))
      (->environment '(scode-optimizer)))
@end lisp

@node In-line Coding, Replacement of Operators, Standard Names, Declarations
@subsection In-line Coding

Another useful facility is the ability to in-line code procedure
definitions.  In fact, the compiler will perform full beta conversion,
with automatic renaming, if you request it.  Here are the relevant
declarations:

@deffn {declaration+} integrate name @dots{}
The variables @var{name}s must be defined in the same file as this
declaration.  Any reference to one of the named variables that appears
in the same block as the declaration, or one of its descendant blocks,
will be replaced by the corresponding definition's value expression.
@end deffn

@deffn {declaration+} integrate-operator name @dots{}
Similar to the @code{integrate} declaration, except that it only
substitutes for references that appear in the operator position of a
combination.  All other references are ignored.
@end deffn

@deffn {declaration+} integrate-external filename
Causes the compiler to use the top-level integrations provided by
@var{filename}.  @var{filename} should not specify a file type, and the
source-code file that it names must have been previously processed by
the compiler.

If @var{filename} is a relative filename (the normal case), it is
interpreted as being relative to the file in which the declaration
appears.  Thus if the declaration appears in file @file{/usr/cph/foo.scm},
then the compiler looks for a file called @file{/usr/cph/@var{filename}.ext}.

Note: When the compiler finds top-level integrations, it collects them
and outputs them into an auxiliary file with extension @file{.ext}.
This @file{.ext} file is what the @code{integrate-external} declaration
refers to.
@end deffn

@findex define-integrable
@findex define
Note that the most common use of this facility, in-line coding of
procedure definitions, requires a somewhat complicated use of these
declarations.  Because this is so common, there is a special form,
@code{define-integrable}, which is like @code{define} but performs the
appropriate declarations.  For example:

@lisp
(define-integrable (foo-bar foo bar)
  (vector-ref (vector-ref foo bar) 3))
@end lisp

Here is how you do the same thing without this special form: there
should be an @code{integrate-operator} declaration for the procedure's
name, and (internal to the procedure's definition) an @code{integrate}
declaration for each of the procedure's parameters, like this:

@lisp
(declare (integrate-operator foo-bar))

(define foo-bar
  (lambda (foo bar)
    (declare (integrate foo bar))
    (vector-ref (vector-ref foo bar) 3)))
@end lisp

The reason for this complication is as follows: the
@code{integrate-operator} declaration finds all the references to
@code{foo-bar} and replaces them with the lambda expression from the
definition.  Then, the @code{integrate} declarations take effect because
the combination in which the reference to @code{foo-bar} occurred
supplies code which is substituted throughout the body of the procedure
definition.  For example:

@lisp
(foo-bar (car baz) (cdr baz))
@end lisp

@noindent
First use the @code{integrate-operator} declaration:

@lisp
((lambda (foo bar)
   (declare (integrate foo bar))
   (vector-ref (vector-ref foo bar) 3))
 (car baz)
 (cdr baz))
@end lisp

@noindent
Next use the internal @code{integrate} declaration:

@lisp
((lambda (foo bar)
   (vector-ref (vector-ref (car baz) (cdr baz)) 3))
 (car baz)
 (cdr baz))
@end lisp

@noindent
Next notice that the variables @code{foo} and @code{bar} are not used,
and eliminate them:

@lisp
((lambda ()
   (vector-ref (vector-ref (car baz) (cdr baz)) 3)))
@end lisp

@noindent
Finally, remove the @code{((lambda () @dots{}))} to produce

@lisp
(vector-ref (vector-ref (car baz) (cdr baz)) 3)
@end lisp


@subsubheading Useful tip
@cindex integrations, seeing effects of
To see the effect of integration declarations (and of macros) on a
source file, pretty-print the @file{.bin} file like this (be prepared
for a lot of output).

@lisp
(sf "foo.scm")
(pp (fasload "foo.bin"))
@end lisp

@node Replacement of Operators, Reduction of Operators, In-line Coding, Declarations
@subsection Operator Replacement

The @code{replace-operator} declaration is provided to inform the
compiler that certain operators may be replaced by other operators
depending on the number of arguments.
For example:

@noindent
Declaration:

@lisp
(declare (replace-operator (map (2 map-2) (3 map-3))))
@end lisp

@noindent
Replacements:

@lisp
(map @var{f} @var{x} @var{y} @var{z}) @expansion{} (map @var{f} @var{x} @var{y} @var{z})
(map @var{f} @var{x} @var{y}) @expansion{} (map-3 @var{f} @var{x} @var{y})
(map @var{f} @var{x}) @expansion{} (map-2 @var{f} @var{x})
(map @var{f}) @expansion{} (map @var{f})
(map) @expansion{} (map)
@end lisp

@noindent
Presumably @code{map-2} and @code{map-3} are efficient versions of
@code{map} that are written for exactly two and three arguments
respectively.  All the other cases are not expanded but are handled by the
original, general @code{map} procedure, which is less efficient because
it must handle a variable number of arguments.

@deffn {declaration+} replace-operator name ...

The syntax of this declaration is

@lisp
(replace-operator
  (@var{name}
    (@var{nargs1} @var{value1})
    (@var{nargs2} @var{value2})
    ...))
@end lisp

where

@itemize @bullet
@item
@var{name} is a symbol.

@item
@var{nargs1}, @var{nargs2} etc.@: are non-negative integers, or one of the
following symbols:  @code{any}, @code{else} or @code{otherwise}.

@item
@var{value1}, @var{value2} etc.@: are simple
expressions in one of these forms:

@table @code
@item '@var{constant}
A constant.

@item @var{variable}
A variable.

@item (primitive @var{primitive-name} @r{[}@var{arity}@r{]})
The primitive procedure named @var{primitive-name}.  The optional
element @var{arity}, a non-negative integer, specifies the number of
arguments that the primitive accepts.

@item (global @var{var})
A global variable.
@end table
@end itemize

The meanings of these fields are:

@itemize @bullet
@item
@var{name} is the name of the operator to be reduced.  If is is not
shadowed (for example, by a let) then it may be replaced according to
the following rules.

@item
If the operator has @var{nargsN} arguments then it is replaced with a
call to @var{valueN} with the same arguments.

@item
If the number of arguments is not listed, and one of the @var{nargsN} is
@code{any}, @code{else} or @code{otherwise}, then the operation is
replaced with a call to the corresponding @var{valueN}.
Only one of the @var{nargsN} may be of this form.

@item
If the number of arguments is not listed and none of the @var{nargsN} is
@code{any}, @code{else} or @code{otherwise}, then the operation is not
replaced.
@end itemize
@end deffn

@node Reduction of Operators,  , Replacement of Operators, Declarations
@subsection Operator Reduction

@findex reduce-operator
The @code{reduce-operator} declaration is provided to inform the
compiler that certain names are n-ary versions of binary operators.
Here are some examples:

@noindent
Declaration:

@lisp
(declare (reduce-operator (cons* cons)))
@end lisp

@noindent
Replacements:

@lisp
(cons* @var{x} @var{y} @var{z} @var{w}) @expansion{} (cons @var{x} (cons @var{y} (cons @var{z} @var{w}))),
(cons* @var{x} @var{y}) @expansion{} (cons @var{x} @var{y})
(cons* @var{x}) @expansion{} @var{x}
(cons*) @error{} too few arguments
@end lisp

@noindent
Declaration:

@lisp
(declare (reduce-operator (list cons (null-value '() any))))
@end lisp

@noindent
Replacements:

@lisp
(list @var{x} @var{y} @var{z} @var{w}) @expansion{} (cons @var{x} (cons @var{y} (cons @var{z} (cons @var{w} '()))))
(list @var{x} @var{y}) @expansion{} (cons @var{x} (cons @var{y} '()))
(list @var{x}) @expansion{} (cons @var{x} '())
(list) @expansion{} '()
@end lisp

@noindent
Declaration:

@lisp
(declare (reduce-operator (- %- (null-value 0 single) (group left))))
@end lisp

@noindent
Replacements:

@lisp
(- @var{x} @var{y} @var{z} @var{w}) @expansion{} (%- (%- (%- @var{x} @var{y}) @var{z}) @var{w})
(- @var{x} @var{y}) @expansion{} (%- @var{x} @var{y})
(- @var{x}) @expansion{} (%- 0 @var{x})
(-) @expansion{} 0
@end lisp

@noindent
Declaration:

@lisp
(declare (reduce-operator (+ %+ (null-value 0 none) (group right))))
@end lisp

@noindent
Replacements:

@lisp
(+ @var{x} @var{y} @var{z} @var{w}) @expansion{} (%+ @var{x} (%+ @var{y} (%+ @var{z} @var{w})))
(+ @var{x} @var{y}) @expansion{} (%+ @var{x} @var{y})
(+ @var{x}) @expansion{} @var{x}
(+) @expansion{} 0
@end lisp

Note: This declaration does not cause an appropriate definition of
@code{%+} (in the last example) to appear in your code.  It merely
informs the compiler that certain optimizations can be performed on
calls to @code{+} by replacing them with calls to @code{%+}.  You should
provide a definition of @code{%+} as well, although it is not required.

@noindent
Declaration:

@lisp
(declare (reduce-operator (apply (primitive cons)
                                 (group right)
                                 (wrapper (global apply) 1))))
@end lisp

@noindent
Replacements:

@lisp
(apply @var{f} @var{x} @var{y} @var{z} @var{w}) @expansion{} ((access apply ()) @var{f} (cons @var{x} (cons @var{y} (cons @var{z} @var{w}))))
(apply @var{f} @var{x} @var{y}) @expansion{} ((access apply ()) @var{f} (cons @var{x} @var{y}))
(apply @var{f} @var{x}) @expansion{} (apply @var{f} @var{x})
(apply @var{f}) @expansion{} (apply @var{f})
(apply) @expansion{} (apply)
@end lisp

@deffn {declaration+} reduce-operator name ...
The general format of the declaration is (brackets denote optional
elements):

@lisp
(reduce-operator
  (@var{name}
    @var{binop}
    @r{[}(group @var{ordering})@r{]}
    @r{[}(null-value @var{value} @var{null-option})@r{]}
    @r{[}(singleton @var{unop})@r{]}
    @r{[}(wrapper @var{wrap} @r{[}n@r{]})@r{]}
    @r{[}(maximum @var{m})@r{]}
  ))
@end lisp

@noindent
where

@itemize @bullet
@item
@var{n} and @var{m} are non-negative integers.

@item
@var{name} is a symbol.

@item
@var{binop}, @var{value}, @var{unop}, and @var{wrap} are simple
expressions in one of these forms:

@table @code
@item '@var{constant}
A constant.

@item @var{variable}
A variable.

@item (primitive @var{primitive-name} @r{[}@var{arity}@r{]})
The primitive procedure named @var{primitive-name}.  The optional
element @var{arity} specifies the number of arguments that the primitive
accepts.

@item (global @var{var})
A global variable.
@end table

@item
@var{null-option} is either @code{always}, @code{any}, @code{one},
@code{single}, @code{none}, or @code{empty}.

@item
@var{ordering} is either @code{left}, @code{right}, or
@code{associative}.
@end itemize

@noindent
The meaning of these fields is:

@itemize @bullet
@item
@var{name} is the name of the n-ary operation to be reduced.

@item
@var{binop} is the binary operation into which the n-ary operation is to
be reduced.

@item
The @code{group} option specifies whether @var{name} associates to the
right or left.

@item
The @code{null-value} option specifies a value to use in the following
cases:

@table @code
@item none
@itemx empty
When no arguments are supplied to @var{name}, @var{value} is returned.

@item one
@itemx single
When a single argument is provided to @var{name}, @var{value} becomes
the second argument to @var{binop}.

@item any
@itemx always
@var{binop} is used on the ``last'' argument, and @var{value} provides
the remaining argument to @var{binop}.
@end table

In the above options, when @var{value} is supplied to @var{binop}, it is
supplied on the left if grouping to the left, otherwise it is supplied
on the right.

@item
The @code{singleton} option specifies a function, @var{unop}, to be
invoked on the single argument left.  This option supersedes the
@code{null-value} option, which can only take the value @code{none}.

@item
The @code{wrapper} option specifies a function, @var{wrap}, to be
invoked on the result of the outermost call to @var{binop} after the
expansion.
If @var{n} is provided it must be a non-negative integer indicating a number
of arguments that are transferred verbatim from the original call to
the wrapper.  They are passed to the left of the reduction.

@item
The maximum option specifies that calls with more than @var{m} arguments
should not be reduced.
@end itemize
@end deffn

@node Efficiency Tips,  , Declarations, Compiling Files
@section Efficiency Tips

How you write your programs can have a large impact on how efficiently the
compiled program runs.  The most important thing to do, after choosing
suitable data structures, is to put the following declaration near the
beginning of the file.

@lisp
(declare (usual-integrations))
@end lisp

Without this declaration the compiler cannot recognize any of the common
operators and compile them efficiently.

The @code{usual-integrations} declaration is usually sufficient to get
good quality compiled code.

If you really need to squeeze more performance out of you code then we
hope that you find the following grab-bag of tips, hints and
explanations useful.


@menu
* Coding style::                
* Global variables::            
* Fixnum arithmetic::           
* Flonum arithmetic::           
* Miscellaneous::               
@end menu

@node Coding style, Global variables, Efficiency Tips, Efficiency Tips
@subsection Coding style

@subsubheading Better predicates

Consider the following implementation of @code{map} as might be found in
any introductory book on Scheme:

@lisp
(define (map f lst)
  (if (null? lst)
      '()
      (cons (f (car lst)) (map f (cdr lst)))))
@end lisp

The problem with this definition is that at the points where @code{car}
and @code{cdr} are called we still do not know that @var{lst} is a pair.
The compiler must insert a type check, or if type checks are disabled,
the program might give wrong results.  Since one of the fundamental
properties of @code{map} is that it transforms lists, we should make the
relationship between the input pairs and the result pairs more apparent
in the code:

@lisp
(define (map f lst)
  (cond ((pair? lst)
         (cons (f (car lst)) (map f (cdr lst))))
        ((null? lst)
         '())
        (else
         ...) ; You decide - '() or an error?
@end lisp

Note also that the @code{pair?} case comes first because we expect that
@code{map} will be called on lists which have, on average, length
greater that one.


@subsubheading Internal procedures

Calls to internal procedures are faster than calls to global procedures.
There are two things tha make internal procedures faster: First, the
procedure call is compiled to a direct jump to a known location, which
is mare efficeint that jumping `via' a global binding.
Second, there is a knock-on effect: since the compiler can see the
internal procedure it can analyze it and possibly produce better code
for other expressions in the body of the loop too.

@lisp
(define (map f original-lst)
  (let walk ((lst original-lst))
    (cond ((pair? lst)
           (cons (f (car lst)) (walk (cdr lst))))
          ((null? lst)
           '())
          (else
           (error "Not a proper list:"  original-lst)))))
@end lisp


@node Global variables, Fixnum arithmetic, Coding style, Efficiency Tips
@subsection Global variables

@cindex variable caches
@cindex reference traps
Compiled code usually accesses variables in top level first-class
environments via @emph{variable caches}.  Each compiled procedure has a
set of variable caches for the global variables that it uses.  There are
three kinds of variable cache - read caches for getting the value of a
variable (referencing the variable), write caches for changing the
value, and execute caches for calling the procedure assigned to that
variable.

Sometimes the variable caches contain special objects, reference traps,
which mean that the operation cannot proceed normally and must either be
completed by the system in order to keep the caches coherent, or must
signal an error.  For example, the assignment

@lisp
(set! newline my-better-newline)
@end lisp

will cause the system to go to each compiled procedure that calls
@code{newline} and update its execute cache.  Obviously you want to
avoid doing this in a loop.  Using @code{fluid-let} to temporarily
redefine a procedure has the same inefficiency (but twice!).

To behave correctly in all situations, each variable reference or
assignment must check for the reference traps.

Sometimes you can prove that the variable (a) will always be bound, (b)
will always be assigned and (c) there will never be any compiled calls
to that variable.
In these cases the following declarations can speed up and reduce the
size of a program that uses global variables.


@deffn {declaration+} ignore-reference-traps variables
This declaration is relatively safe.  If the variable is unbound or
unassigned then a variable reference will yield a reference trap object,
instead of signaling an error.  The reference trap object may later find
its way into interpreted code and cause some `unrelated' variable to
mysteriously become unbound or unassigned.
@end deffn

@deffn {declaration+} ignore-assignment-traps variables
This declaration can cause a great deal of trouble.  An assignment to a
variable that ignores assignment traps can cause a great deal of
trouble.  If there is a compiled procedure call anywhere in the system
to this variable, the execute caches will not be updated, causing an
inconsistency between the value used for the procedure call and the
value seen by reading the variable.  This mischief is compounded by the
fact that the assignment can cause other assignments that were compiled
with checks to behave this way too.
@end deffn

The @var{variables} are specified with expressions from the following
set language.

@deffn {variable-specification} set name ...
All of the explicitly listed names.
@end deffn

@deffn {variable-specification} all
@deffnx {variable-specification} none
@deffnx {variable-specification} free
@deffnx {variable-specification} bound
@deffnx {variable-specification} assigned
These expressions name sets of variables. @code{all} is the set of all
variables, @code{none} is the empty set, @code{free} is all of the
variables bound outside the current block, @code{bound} is all of the
variables bound in the current block and @code{assigned} is all of the
variables for which there exists an assignment (@code{set!}).
@end deffn

@deffn {variable-specification} union set1 set2
@deffnx {variable-specification} intersection set1 set2
@deffnx {variable-specification} difference set1 set2

For example, to ignore reference traps on all the variables except
@var{x}, @var{y} and any variable that is assigned to

@example
(declare (ignore-reference-traps
          (difference all (union assigned (set x y)))))
@end example

@end deffn


@node Fixnum arithmetic, Flonum arithmetic, Global variables, Efficiency Tips
@subsection Fixnum arithmetic

The usual arithmetic operations like @code{+} and @code{<} are called
generic arithmetic operations because they work for all (appropriate)
kinds of number.

@cindex fixnum (defn)
A @dfn{fixnum} is an exact integer that is small enough to fit in a
machine word.  In MIT Scheme, fixnums are typically 24 or 26 bits,
depending on the machine; it is reasonable to assume that fixnums are at
least 24 bits.  Fixnums are signed; they are encoded using 2's
complement.

All exact integers that are small enough to be encoded as fixnums are
always encoded as fixnums --- in other words, any exact integer that is
not a fixnum is too big to be encoded as such.  For this reason, small
constants such as @code{0} or @code{1} are guaranteed to be fixnums.  In
addition, the lengths of and valid indexes into strings and vectors are
also always fixnums.

If you know that a value is always a small fixnum, you can substitute
the equivalent fixnum operation for the generic operation.  However,
care should be exercised: if used improperly, these operations can
return incorrect answers, or even malformed objects that confuse the
garbage collector.  The Scheme Reference Manual lists all the fixnum
operations.

A fruitful area for inserting fixnum operations is in the index
operations in tight loops.

Adding fixnum operations yourself is not always effective because the
compiler sometimes can figure out that a value just has to be a fixnum
and replaces the generic operation with the fixnum one.  For example, in
the following code, the compiler knows that the result of
@code{vector-length} is always a fixnum, and so replaces @code{-} with
@code{fix:-}.

@example
(define (last-index v) (- (vector-length v) 1))
@end example

In the following example the compiler replaces @code{+} with
@code{fix:+} because it knows that if @var{k} was not a fixnum then the
@code{vector-ref} was an error:

@example
(define (ref-inc v k)
  (display (vector-ref v k))
  (+ k 1))
@end example

Unfortunately there is no reasonable way to tell which
operations the compiler replaces.


@node Flonum arithmetic, Miscellaneous, Fixnum arithmetic, Efficiency Tips
@subsection Flonum arithmetic

!INCOMPLETE

Getting efficient flonum arithmetic is much more complicated and harder
than getting efficient fixnum arithmetic.

@subsubheading Flonum consing

@cindex flonum consing
One of the main disadvantages of generic arithmetic is that not all
kinds of number fit in a machine register.
Flonums have to be @dfn{boxed} because a 64 bit IEEE floating point
number (the representation the MIT Scheme uses) does not fit in a
regular machine word.
Values are boxed by storing them in a small record in the heap.
Every floating point value that you see at the REPL is boxed.
Floating point values are only unboxed for short periods of time when
they are in the machine's floating point unit and actual floating point
operations are begin performed.


Numerical calculations that happen to be using floating point numbers
cause many temporary floating point numbers to be allocated.  It is not
uncommon for numerical programs to spend over half of the time creating
and garbage collecting the flonums.

Consider the following procedure for computing the distance of a point
@var{(x,y)} from the origin.

@example
(define (distance x y)
  (sqrt (+ (* x x) (* y y))))
@end example

The call @code{(distance 0.3 0.4)} returns a new, boxed flonum, 0.5.
The calculation also generates three intermediate boxed flonums.  This
next version works only for flonum inputs, generates only one boxed
flonum (the result) and runs eight times faster:

@example
(define (flo:distance x y)
  (flo:sqrt (flo:+ (flo:* x x) (flo:* y y))))
@end example

Note that @code{flo:} operations are usually effective only within a
single arithmetic expression.  If the expression contains conditionals
or calls to procedures then the values tend to get boxed anyway.


@subsubheading A safer alternative

An alternative to putting in @code{flo:} operations yourself is to let
the compiler try.
In the next definition of @code{distance}, the programmer explicitly
tests for flonum arguments and duplicates the expression.

The compiler compiles the expressions differently: for the first
expression it knows from the conditional that @var{x} and @var{y} are
flonums and will replace both @code{*} and the @code{+} operators with
flonum operators.
It doesn't replace the @code{sqrt} operator, though, as it doesn't know
that sums of squares of reals are non-negative.

This approach has the advantage of being completely safe, and
@code{distance} will still work for other kinds of number.

@example
(define (distance x y)
  (if (and (flo:flonum? x) (flo:flonum? y))
      (sqrt (+ (* x x) (* y y)))
      (sqrt (+ (* x x) (* y y)))))
@end example

@subsubheading Flonum vectors

Flonum vectors are vectors which contain only floating point values, in
much the same way as a string is a `vector' containing only character
values.

Flonum vectors have the advantages of compact storage (about half of
that of a conventional vector of flonums) and judicious use of flonum
vectors can decrease flonum consing.

The disadvantages are that flonum vectors are incompatible with ordinary
vectors, and if not used carefully, can increase flonum consing.  Flonum
vectors are a pain to use because they require you to make a decision
about the representation and stick with that, and it might not be easy
to ascertain whether the advantages in one part of the program outweigh
the disadvantages in another.

@deffn {procedure+} flo:vector-cons n
Create a flonum vector of length @var{N}.
The contents of the vector are arbitrary and might not be valid floating
point numbers.
The contents should not be used until initialized.
@end deffn

@deffn {procedure+} flo:vector-ref flonum-vector index
@deffnx {procedure+} flo:vector-set! flonum-vector index value
@deffnx {procedure+} flo:vector-length flonum-vector
These operations are analogous to the ordinary vector operations.
@end deffn

This next operation causes no flonum consing because the flonum is
loaded directly from the flonum vector into a floating point machine
register, added, and stored again.  There is no need for a temporary
boxed flonum.

@example
(flo:vector-set v 0 (flo:+ (flo:vector-ref v 0) 1.2))
@end example

In this example, every time @code{g} is called, a new boxed flonum has
to be created so that a valid Scheme object can be returned.
If @code{g} is called more often than the elements of @var{v} are
changed then an ordinary vector might be more efficient.

@example
(define (g i)
  (flo:vector-ref v i))
@end example



@subsubheading Common pitfalls

Pitfall 1:
Make sure that your literals are floating point constants:

@example
(define (f1 a) (flo:+ a 1))
(define (f2 a) (flo:+ a 1.))
@end example

@code{F1} will most likely cause a hardware error, and certainly give
the wrong answer. @code{F2} is correct.


Pitfall 2:
It is tempting to insert calls to @code{exact->inexact} to coerce values
into flonums.
This does not always work because complex numbers may be exact or inexact too.
In addition, the current implementation of @code{exact->inexact} is slow.


Pitfall 3:
A great deal of care has to be taken with the standard math procedures.
For example, when called with a flonum, both @code{sqrt} and @code{asin}
can return a complex number.



@node Miscellaneous,  , Flonum arithmetic, Efficiency Tips
@subsection Miscellaneous

@subsubheading @code{in-package} and declarations

Declarations from outside of an @code{in-package} form do not apply to
the body of the form.  This is because the assumptions behind
declarations in the enclosing text might not apply to the body.  As the
@code{usual-integrations} declaration is included in this rule, it is a
good idea to repeat the declaration e.g@:.

@lisp
  ...
  (in-package some-environment
    (declare (usual-integrations))
    ...)
  ...
@end lisp



@node GNU Emacs Interface, Edwin, Compiling Files, Top
@chapter GNU Emacs Interface

There is an interface library, called @code{xscheme}, distributed with
MIT Scheme and GNU Emacs, which facilitates running Scheme as a
subprocess of Emacs.  If you wish to use this interface, please install
the version of @file{xscheme.el} that comes with MIT Scheme, as it is
guaranteed to be correct for your version of Scheme.

@findex run-scheme
@findex -emacs
To invoke Scheme from Emacs, use @kbd{M-x run-scheme}, which is defined
when either of the libraries @file{scheme} or @file{xscheme} is loaded.
You may give @code{run-scheme} a prefix argument, in which case it will
allow you to edit the command line that is used to invoke Scheme.
@emph{Do not} remove the @code{-emacs} option!

@findex scheme-interaction-mode
Scheme will be started up as a subprocess in a buffer called
@code{*scheme*}.  This buffer will be in @code{scheme-interaction-mode}
and all output from the Scheme process will go there.  The mode line for
the @code{*scheme*} buffer will have this form:

@example
--**-*scheme*: 1 [Evaluator]           (Scheme Interaction: input)------
@end example

@noindent
@cindex level number, REPL
The first field, showing @samp{1} in this example, is the level number.

@noindent
The second field, showing @samp{[Evaluator]} in this example, describes
the type of @sc{repl} that is running.  Other values include:

@example
[Debugger]
[Where]
@end example

@noindent
The @dfn{mode} after @samp{Scheme Interaction} is one of:

@table @samp
@item input
Scheme is waiting for input.

@item run
Scheme is running an evaluation.

@item gc
Scheme is garbage collecting.
@end table

@findex scheme-mode
When @code{xscheme} is loaded, @code{scheme-mode} is extended to include
commands for evaluating expressions (do @kbd{C-h m} in any
@code{scheme-mode} buffer for the most up-to-date information):

@table @kbd
@item @key{ESC} o
@kindex @key{ESC} o
@findex xscheme-send-buffer
Evaluates the current buffer (@code{xscheme-send-buffer}).

@item @key{ESC} z
@kindex @key{ESC} z
@findex xscheme-send-definition
Evaluates the current definition (@code{xscheme-send-definition}).  This
is also bound to @kbd{@key{ESC} C-x}.

@item @key{ESC} C-z
@kindex @key{ESC} C-z
@findex xscheme-send-region
Evaluates the current region (@code{xscheme-send-region}).

@item C-x C-e
@kindex C-x C-e
@findex xscheme-send-previous-expression
Evaluates the expression to the left of point
(@code{xscheme-send-previous-expression}).  This is also bound to
@kbd{@key{ESC} @key{RET}}.

@item C-c C-s
@kindex C-c C-s
@findex xscheme-select-process-buffer
Selects the @code{*scheme*} buffer and places you at its end
(@code{xscheme-select-process-buffer}).

@item C-c C-y
@kindex C-c C-y
@findex xscheme-yank-previous-send
Yanks the most recently evaluated expression, placing it at point
(@code{xscheme-yank-previous-send}).  This works only in the
@code{*scheme*} buffer.
@end table

The following commands provide interrupt capability:

@table @kbd
@item C-c C-c
@kindex C-c C-c
@findex xscheme-send-control-g-interrupt
Like typing @kbd{C-g} when running Scheme without Emacs
(@code{xscheme-send-control-g-interrupt}).

@item C-c C-x
@kindex C-c C-x
@findex xscheme-send-control-x-interrupt
Like typing @kbd{C-c C-x} when running Scheme without Emacs
(@code{xscheme-send-control-x-interrupt}).

@item C-c C-u
@kindex C-c C-u
@findex xscheme-send-control-u-interrupt
Like typing @kbd{C-c C-u} when running Scheme without Emacs
(@code{xscheme-send-control-u-interrupt}).

@item C-c C-b
@kindex C-c C-b
@findex xscheme-send-breakpoint-interrupt
Like typing @kbd{C-c C-b} when running Scheme without Emacs
(@code{xscheme-send-breakpoint-interrupt}).

@item C-c C-p
@kindex C-c C-p
@findex xscheme-send-proceed
Like evaluating @code{(proceed)} (@code{xscheme-send-proceed}).
@end table

@node Edwin, Concept Index, GNU Emacs Interface, Top
@chapter Edwin

This chapter describes how to start Edwin, the MIT Scheme text editor.
Edwin is very similar to GNU Emacs --- you should refer to the GNU Emacs
manual for information about Edwin's commands and key bindings ---
except that Edwin's extension language is MIT Scheme, while GNU Emacs
extensions are written in Emacs Lisp.  This manual does not discuss
customization of Edwin.

@menu
* Starting Edwin::              
* Leaving Edwin::               
* Last Resorts::                
* Comparison of Edwin 3.82 to Emacs 18.57::  
@end menu

@node Starting Edwin, Leaving Edwin, Edwin, Edwin
@section Starting Edwin

To use Edwin, start Scheme with a world image containing Edwin (for
example by giving the @code{-edwin} command-line option), then call the
procedure @code{edit}:

@deffn {procedure+} edit
@deffnx {procedure+} edwin
Enter the Edwin text editor.  If entering for the first time, the editor
is initialized (by calling @code{create-editor} with no arguments).
Otherwise, the previously-initialized editor is reentered.

This procedure is sometimes evaluated from the command line to start
Scheme with Edwin running:

@example
scheme -edwin -eval (edit)
@end example

@findex edwin
The procedure @code{edwin} is an alias for @code{edit}.
@end deffn

@defvr {variable+} inhibit-editor-init-file?
When Edwin is first initialized, it loads your init file (called
@file{~/.edwin} on unix, @file{edwin.ini} on PCs) if you have one.  If
the Scheme variable @code{inhibit-editor-init-file?} is true, however,
your init file will not be loaded even if it exists.  By default, this
variable is false.
@end defvr

@deffn {procedure+} create-editor arg @dots{}
Initializes Edwin, or reinitializes it if already initialized.
@code{create-editor} is normally invoked automatically by @code{edit}.

If no @var{arg}s are given, the value of @code{create-editor-args} is
used instead.  In other words, the following are equivalent:

@lisp
(create-editor)
(apply create-editor create-editor-args)
@end lisp

@noindent
On the other hand, if @var{arg}s are given, they are used to update
@code{create-editor-args}, making the following equivalent:

@lisp
(apply create-editor @var{args})
(begin (set! create-editor-args @var{args}) (create-editor))
@end lisp
@end deffn

@defvr {variable+} create-editor-args
This variable controls the initialization of Edwin.  The following
values are defined:

@table @code
@item (console)
This says to run Edwin on Scheme's console, or in unix terminology, the
standard input and output.  If the console is not a terminal device, or
is not powerful enough to run Edwin, an error will be signalled at
initialization time.

@item (x)
@findex DISPLAY
This says to create an X window and run Edwin on it.  This requires the
@code{DISPLAY} environment variable to have been set to the appropriate
value before Scheme was started.

@item (x @var{geometry})
This is like @code{(x)} except that @var{geometry} specifies the
window's geometry in the usual way.  @var{Geometry} must be a character
string whose contents is an X geometry specification.

@item (#f)
This is the default.  It says to try running Edwin on Scheme's console,
and failing that, to create an X window and run Edwin on that.  This
signals an error if neither the console nor the X display is usable.
@end table
@end defvr

@node Leaving Edwin, Last Resorts, Starting Edwin, Edwin
@section Leaving Edwin

Once Edwin has been entered, it can be exited in the following ways:

@table @kbd
@item C-x z
@kindex C-x z
@findex suspend-edwin
Stop Edwin and return to Scheme (@code{suspend-edwin}).  The call to the
procedure @code{edit} that entered Edwin returns normally.  A subsequent
call to @code{edit} will resume Edwin where it was stopped.

@item C-x c
@kindex C-x c
@findex save-buffers-kill-edwin
Offer to save any modified buffers, then kill Edwin, returning to Scheme
(@code{save-buffers-kill-edwin}).  This is like the @code{suspend-edwin}
command, except that a subsequent call to @code{edit} will reinitialize
the editor.

@item C-x C-z
@kindex C-x C-z
@findex suspend-scheme
Stop Edwin and suspend Scheme, returning control to the operating
system's command interpreter (@code{suspend-scheme}).  When Scheme is
resumed (using the command interpreter's job-control commands), Edwin is
automatically restarted where it was stopped.  This command is identical
to the @kbd{C-x C-z} command of GNU Emacs.

@item C-x C-c
@kindex C-x C-c
@findex save-buffers-kill-scheme
Offer to save any modified buffers, then kill both Edwin and Scheme
(@code{save-buffers-kill-scheme}).  Control is returned to the operating
system's command interpreter, and the Scheme process is terminated.
This command is identical to the @kbd{C-x C-c} command of GNU Emacs.
@end table

@node Last Resorts, Comparison of Edwin 3.82 to Emacs 18.57, Leaving Edwin, Edwin
@section Last Resorts

When Scheme exits abnormally it tries to save any unsaved Edwin buffers.
The buffers are saved in an auto-save file in case the original is more
valuable than the unsaved version.  You can use the editor command
@code{M-x recover-file} to recover the auto-saved version.  The
auto-save files are named so: under unix, @file{foo.scm} will be saved
as @file{#foo.scm#}; on PCs it will be saved as @file{foo.s00}, a backup
file with version @samp{00} (which is never used as an actual version).

The following Scheme procedures are useful for recovering from bugs in
Edwin's implementation.  All of them are designed for use when Edwin is
@emph{not} running --- they should not be used when Edwin is running.
These procedures are designed to help Edwin's implementors deal with
bugs during the implementation of the editor; they are not intended for
casual use, but as a means of recovering from bugs that would otherwise
require reloading the editor's world image from the disk.

@deffn {procedure+} save-editor-files
Examines Edwin, offering to save any unsaved buffers.  This is useful if
some bug caused Edwin to die while there were unsaved buffers, and you
want to save the information without restarting the editor.
@end deffn

@deffn {procedure+} reset-editor
Resets Edwin, causing it to be reinitialized the next time that
@code{edit} is called.  If you encounter a fatal bug in Edwin, a good
way to recover is to first call @code{save-editor-files}, and then to
call @code{reset-editor}.  That should completely reset the editor to
its initial state.
@end deffn

@deffn {procedure+} reset-editor-windows
Resets Edwin's display structures, without affecting any of the buffers
or their contents.  This is useful if a bug in the display code causes
Edwin's internal display data structures to get into an inconsistent
state that prevents Edwin from running.
@end deffn

@node Comparison of Edwin 3.82 to Emacs 18.57,  , Last Resorts, Edwin
@section Comparison of Edwin 3.82 to Emacs 18.57

This section documents all known differences between Edwin 3.82 and
Emacs 18.57.  A reference to a ``documented'' feature of Emacs means
that the feature is documented in the GNU Emacs version 18 manual.

@menu
* Incompatibilities of Edwin::  
* Deficiencies of Edwin::       
* Subsystems Missing from Edwin::  
* Commands Missing from Edwin::  
* Variables Missing from Edwin::  
* Per-Buffer Variables::        
* Edwin Bugs::                  
@end menu

@node Incompatibilities of Edwin, Deficiencies of Edwin, Comparison of Edwin 3.82 to Emacs 18.57, Comparison of Edwin 3.82 to Emacs 18.57
@subsection Incompatibilities

These are differences in design, unlikely to be `fixed'.

@itemize @bullet
@item
Edwin's keyboard character set is a superset of Emacs'.  Edwin has
support for real MIT-style bucky bits.  Under X windows (and perhaps
other systems) Edwin can distinguish between @kbd{C-a} and @kbd{C-a},
@kbd{C-SPC} and @kbd{C-@@}, etc.  When running on a terminal or a PC/DOS
console, the input set is limited to 8-bit ASCII as in Emacs.

@item
Edwin is case-insensitive for command and variable names.

@item
Edwin additionally defines @kbd{C-z} and @kbd{C-^} as prefix keys.
@kbd{C-z} is the @key{CTRL-META} prefix, and @kbd{C-^} is the @key{CTRL}
prefix, both as in TOPS-20 EMACS.

@item
@kbd{C-z} doesn't suspend Edwin.  @kbd{C-x C-z} suspends both Emacs and
Edwin, but isn't defined in the Emacs Manual.  Under X, Emacs produces
an error message when @kbd{C-x C-z} is typed; Edwin suspends itself if
it was started from a shell with job control, otherwise it dies.

@item
@kbd{C-h f} doesn't work for anything but editor commands, i.e.@: it
only documents editor commands, not ordinary Scheme procedures like
@code{car} or @code{call-with-current-continuation}.

@item
@kbd{C-h v} doesn't work for anything but editor variables, i.e.@: it
only documents editor variables, not ordinary Scheme variables.

@item
In Edwin, @kbd{C-w} and @kbd{C-y} don't skip to next occurrence in
reverse i-search.  This is intentional.

@item
@code{comment-indent-hook} is defined differently.  In Emacs, it is
called with no arguments and with point at the beginning of the comment;
in Edwin, it is called with a single argument, the mark at the beginning
of the comment, and with point undefined.

@item
Edwin's completion of Scheme variables is environment dependent.  In
@code{Scheme} and @code{Scheme Interaction} modes, @kbd{M-TAB} completes
the Scheme variable name.  Completion is environment-dependent, so a
prefix may complete differently (or not at all) in two different buffers
with different associated environments.

DOS Note: Since @kbd{Alt+TAB} is an MS Windows hot key, you can get the
same effect (without disabling it) by typing @kbd{Alt+Ctrl+I}.

@item
@kbd{M-x load-file} and @kbd{M-x load-library} behave somewhat
differently in Edwin.

@item
The evaluation commands are much different in Edwin.

@item
Edwin doesn't recognize @samp{Local Variables:} at the end of a file;
instead it recognizes @samp{Edwin Variables:}.  This is done because it
cannot support the full syntax of Emacs local variables.

@item
Variable @code{text-mode-hook} is an event distributor rather than a
procedure of no arguments.
@end itemize

@node Deficiencies of Edwin, Subsystems Missing from Edwin, Incompatibilities of Edwin, Comparison of Edwin 3.82 to Emacs 18.57
@subsection Deficiencies

Deficiencies are shortcomings of Edwin that are likely to be fixed.

@itemize @bullet
@item
@kbd{C-x ^} can be used to grow or shrink the minibuffer window in Emacs
but not in Edwin.

@item
@kbd{C-h} in Edwin is a subset of that in Emacs.
Missing subcommands:

@example
n   view-emacs-news
c-c describe-copying
c-d describe-distribution
c-w describe-warranty
@end example

@item
Dired is missing these commands in Edwin: @kbd{v} and @kbd{B}.
Under DOS it is missing the following:

@example
v   @r{view this file.}
B   @r{byte-compile this file.}
M   @r{change this file's permissions.}
G   @r{change this file's group.}
O   @r{change this file's owner.}
C   @r{compress this file.}
U   @r{uncompress this file.}
@end example

@item
Dired has the following subcommands that Emacs does not have: 

@example
k   @r{mark file for copying}
y   @r{copy marked files}
@end example

@item
@kbd{C-x n} is not disabled by default.

@item
Edwin does not have the notion of ``novice''.
@end itemize

@node Subsystems Missing from Edwin, Commands Missing from Edwin, Deficiencies of Edwin, Comparison of Edwin 3.82 to Emacs 18.57
@subsection Missing Subsystems

The following documented subsystems are implemented by Emacs but not by
Edwin.

@itemize @bullet
@item
abbrev mode (edwin has dynamic abbreviations)

@item
emulation modes: edt, vi, vip

@item
file locks

@item
language modes: emacs-lisp, fortran, lisp, modula-2, prolog

@item
overwrite mode

@item
picture mode

@item
slow terminal incremental search

@item
spelling

@item
tab stops

@item
text formatter modes: nroff, scribe, tex, latex
@end itemize

DOS Note:

Some modes are available under Unix, but are not included in the standard
DOS edwin binary to reduce its size or because they don't work under DOS:

@example
Missing Command or mode                     Reason
-----------------------                     ------

* dabbrev                                   reduce size
  compile                                   needs subprocess support
  shell                                     needs subprocess support
                                            + there is a DOS replacement
  techinfo                                  specific to MIT & Unix
  telnet                                    needs subprocess support
* midas mode (assembly language editing)    reduce size
* pascal mode                               reduce size
  texinfo                                   reduce size
  man                                       specific to unix
  print                                     does not work yet
* run-notifier                              reduce size
* outline mode                              reduce size
* info                                      reduce size
  rcs                                       needs subprocess support
  sendmail                                  needs subprocess support
  malias                                    useless without sendmail
* occur (and list-matching-lines)           reduce size
  rmail                                     needs subprocess support
                                            + specific to Unix ?
  rmailsrt                                  useless without rmail
@end example

Many of the missing modes and commands (compile, shell, rcs,
sendmail) require subprocess support.  They should be easy to bring
up if subprocesses become available, however the code (or even the
concept) may be Unix specific.  There is a pseudo-shell mode for DOS. 

Many of the subsystems listed above have not been tried under DOS.
The ones that are known to work are marked with an asterisk (*),
although for some of them variables have to be set appropriately
before use (e.g.@: @code{info-directory} for info).

@node Commands Missing from Edwin, Variables Missing from Edwin, Subsystems Missing from Edwin, Comparison of Edwin 3.82 to Emacs 18.57
@subsection Missing Commands

These commands are implemented by Emacs but not by Edwin.  The commands
marked with an asterisk are implemented by the unix version of Edwin but
not by the PC version.  Some of the asterisked comands can work in the
PC version but the code to implement them is not loaded in order to save
space; others are unix-specific and are not implemented on the PC.

@example
  abbrev-mode
  abbrev-prefix-mark
  add-change-log-entry
  add-change-log-entry-other-window
  add-global-abbrev
  add-mode-abbrev
  add-name-to-file
  append-to-buffer
  byte-compile-file
  byte-recompile-directory
  cancel-debug-on-entry
* compile
  convert-mocklisp-buffer
  copy-to-buffer
  debug-on-entry
  define-abbrevs
* delete-matching-lines
* delete-non-matching-lines
  describe-copying
  describe-distribution
  describe-no-warranty
  describe-syntax
  disable-command
  disassemble
  display-time                          @r{(}run-notifier @r{is similar)}
  dissociated-press
  doctor
  edit-abbrevs
  edit-abbrevs-redefine
  edit-options
  edit-picture
  edit-tab-stops
  edit-tab-stops-note-changes
  edt-emulation-on
  emacs-lisp-mode
  emacs-version
  enable-command
  expand-abbrev
  expand-region-abbrevs
  flush-lines
  fortran-mode
  global-set-key                        (set-key is similar)
  grep
  hanoi
  indent-c-exp                          c-indent-expression
  insert-abbrevs
  insert-kbd-macro                      write-kbd-macro
  insert-parentheses
  inverse-add-global-abbrev
  inverse-add-mode-abbrev
* keep-lines
  kill-all-abbrevs
  latex-mode                            Note: BAL has one
  lisp-complete-symbol                  (scheme-complete-variable is similar)
  lisp-interaction-mode                 (inferior-repl-mode is similar)
  lisp-mode
  lisp-send-defun
  list-abbrevs
  list-command-history
  list-options
  list-tags
  local-set-key
* lpr-buffer
* lpr-region
  make-symbolic-link
  make-variable-buffer-local
* manual-entry
  modify-syntax-entry
  move-past-close-and-reindent
  next-error
  next-file
  nroff-mode
* occur
* occur-mode-goto-occurrence
  open-dribble-file
  open-termscript
  overwrite-mode
  plain-tex-mode
  prepend-to-buffer
* print-buffer
* print-region
  read-abbrev-file
  recover-file
  run-lisp
  save-buffers-kill-emacs               save-buffers-kill-scheme
  set-gosmacs-bindings
* shell-command
* shell-command-on-region
  spell-buffer
  spell-region
  spell-string
  spell-word
  suspend-emacs                         suspend-scheme
  tab-to-tab-stop
  tags-apropos
  tex-mode
  top-level
  unexpand-abbrev
  vi-mode
  view-buffer
  view-emacs-news
  view-file
  vip-mode
  write-abbrev-file
  yow
  zap-to-char
@end example

@node Variables Missing from Edwin, Per-Buffer Variables, Commands Missing from Edwin, Comparison of Edwin 3.82 to Emacs 18.57
@subsection Missing Variables

These documented variables are implemented by Emacs but not Edwin.  The
variables marked with an asterisk are implemented by the unix version of
Edwin, but not by the PC version.

@example
  abbrev-all-caps
  abbrev-file-name
  blink-matching-paren
  blink-matching-paren-distance
  buffer-read-only
  c-tab-always-indent
  comment-start-skip
* compile-command
  completion-ignore-case                @r{(not documented)}
  ctl-arrow
  debug-on-error                        debug-on-editor-error
                                        debug-on-internal-error
                                        debug-on-evaluation-error
                                        @r{are similar, but more specific}
  debug-on-quit
  default-directory
  default-major-mode
  echo-keystrokes
  initial-major-mode                    @r{Scheme variable} initial-buffer-mode
  insert-default-directory
  inverse-video
  kill-ring-max
  load-path
* lpr-switches
  major-mode
  mark-ring
  mark-ring-max                         mark-ring-maximum
  meta-flag
  no-redraw-on-recenter
  save-abbrevs
  selective-display-ellipses
* shell-file-name
  tab-stop-list
  tags-file-name                        @r{(}tags-table-pathname@r{ is similar)}
  track-eol
  visible-bell
@end example

@node Per-Buffer Variables, Edwin Bugs, Variables Missing from Edwin, Comparison of Edwin 3.82 to Emacs 18.57
@subsection Per-Buffer Variables

These documented variables are per-buffer in Emacs but not in Edwin.

@example
abbrev-mode
auto-fill-hook
buffer-auto-save-file-name
buffer-backed-up
buffer-file-name
buffer-offer-save
buffer-read-only
buffer-saved-size
buffer-undo-list
ctl-arrow
default-directory
local-abbrev-table
major-mode
mark-ring
mode-name
overwrite-mode
selective-display
selective-display-ellipses
shell-prompt-pattern
@end example

@node Edwin Bugs,  , Per-Buffer Variables, Comparison of Edwin 3.82 to Emacs 18.57
@subsection Edwin Bugs

Incorrect behavior of Edwin that will be fixed:

@itemize @bullet
@item
Negative argument to @kbd{M-u}, @kbd{M-l}, and @kbd{M-c} seems to work
by accident.

@item
@samp{-*- foo -*-} is valid if preceded only by blank lines; in Edwin
this works only if it is on a file's the first line.

@item
Closing paren doesn't check for mismatched delimiters and issue warning
message.  In c-mode, @samp{]} isn't treated specially, and don't flash
the matching delimiter.

@item
@kbd{C-u C-x ;} isn't handled right in Edwin.

@item
@kbd{M-x indent-for-comment} shouldn't reindent existing comment in
column zero.
@end itemize

@node Concept Index,  , Edwin, Top
@unnumbered Concept Index
@printindex cp

@contents
@bye

@c Local Variables:
@c selective-display: t
@c truncate-lines: nil
@c End:
