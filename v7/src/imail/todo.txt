IMAIL To-Do List
$Id: todo.txt,v 1.64 2000/06/05 21:27:26 cph Exp $

Bug fixes
---------

* M-x imail-copy-messages re-reads the target folder UIDs for each
  message that is written, when the target folder is not being
  visited.  [I haven't seen this lately.  Maybe it's fixed?]

* Must be able to handle malformed headers in incoming mail.
  Generating a low-level error in this situation is unacceptable.

* RMAIL file reader must recognize when the tail of the file contains
  umail messages.

New features
------------

* Command to expand attachment inline.  Sometimes attachments aren't
  big binary things but small text things that are easier to view
  inline.

* Command to move to first unseen message in folder.

* In M-x imail-copy-folder, default the target buffer to have the same
  name as the source buffer, e.g. from "foo.rmail" to "inbox.foo".
  [It may not be obvious how to do this as I'm not sure how to specify
  the prefix "inbox." in a server-independent way.]

* Set the IMAIL buffer's modification bit to indicate whether the
  folder is locally modified.  Meaningful only for file folders.  Hook
  up the save-folder code into M-x save-some-buffers.

* Add command to rename folders.

* Add mail notification in mode line, active across the editor as long
  as there is an IMAP connection open in some buffer.

* Implement cache that saves information about messages on disk.  This
  should use UIDs for IMAP folders; for other folders perhaps the
  message ID can be used.  (Or perhaps no cache is required for
  non-IMAP folders.)

* Implement file backup when writing file folders.

* Write folder browser for IMAP servers.  Implement
  AVAILABLE-FOLDER-NAMES.

* Generate file I/O messages when reading and writing file folders.

* IMAIL must support I/O to compressed files (for my sake if no one
  else).  A clean solution to this requires moving compressed-file
  support to the runtime system.

* Implement something closer to the IMAP COPY operation, e.g.
  APPEND-MESSAGES.

Design changes
--------------

* Move pathname-completion code into the runtime system.

* Repackage the code so that each file now in the core is in a
  separate package.

* Reimplement UID synchronization.  Take advantage of monotonic UID
  numbers to discover largest prefix range that hasn't changed.
  Binary search can be used which should produce excellent results on
  large folders.  UID FETCH command should be useful for this.

* Try to leverage IMAP MIME parser by building compatible
  interface for file-based folders.

* Change file URLs to follow specification in RFC1738, which requires
  the use of forward slashes and encoding.  Take advantage of relative
  URLs as specified in RFC1808.  Maybe change URL representation to
  have a heirarchical path structure so that we can write MERGE-URLS.
