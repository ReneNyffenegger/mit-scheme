IMAIL To-Do List
$Id: todo.txt,v 1.86 2000/06/19 12:54:33 cph Exp $

Bug fixes
---------

* When yanking MIME messages into a reply buffer, reformat the message
  in the reply buffer, but drop any out-of-line content.  The user
  should see exactly the same text, minus the attachments.  Otherwise
  it's just confusing, and it requires extra editing to do the reply.

* M-x imail-toggle-message isn't really a replacement for M-x
  imail-toggle-headers.  If the message is really large, and you just
  want to see the headers, it's serious overkill.  So reimplement the
  latter, and bind the former to `T'.

* Must be able to handle malformed headers in incoming mail.
  Generating a low-level error in this situation is unacceptable.

* RMAIL file reader must recognize when the tail of the file contains
  umail messages.

MIME conformance
----------------

* Implement codec for =?x?y?z?= header notation.  Use codec to do
  encoding/decoding in header fields.

* When sending message attachments, examine them to see if they are
  properly encoded for 7bit transmission.  If not, encode them as
  needed.  When a message is already encoded but violates the spec,
  decode and re-encode it.

* Don't inline anything other than text.  (Although message/rfc822
  should also be shown, though the spec doesn't say so.)

New features
------------

* Add variable to control how multipart/alternative shows the
  secondary alternatives.

* For multipart/alternative, choose the part to show by examining each
  part looking for highest-quality one that is allowed to be inlined.

* Examine spec for text/enriched and see if it can be incorporated
  into the reader.

* Command to save an attachment should work on inline entities too.

* Support the "flagged" message flag by highlighting messages with
  this flag in the summary buffer.

* When yanking a message into a reply buffer, need option to quote the
  original message using MIME, rather than the current copy-and-indent
  mechanism.

* Command to expand attachment inline.  Sometimes attachments aren't
  big binary things but small text things that are easier to view
  inline.

* Set the IMAIL buffer's modification bit to indicate whether the
  folder is locally modified.  Meaningful only for file folders.  Hook
  up the save-folder code into M-x save-some-buffers.

* Add mail notification in mode line, active across the editor as long
  as there is an IMAP connection open in some buffer.

* Implement cache that saves information about messages on disk.  This
  should use UIDs for IMAP folders; for other folders perhaps the
  message ID can be used.  (Or perhaps no cache is required for
  non-IMAP folders.)

* Implement file backup when writing file folders.

* Write folder browser for IMAP servers.  Implement
  AVAILABLE-FOLDER-NAMES.

* Generate file I/O messages when reading and writing file folders.

* IMAIL must support I/O to compressed files (for my sake if no one
  else).  A clean solution to this requires moving compressed-file
  support to the runtime system.

* Implement something closer to the IMAP COPY operation, e.g.
  APPEND-MESSAGES.

Design changes
--------------

* Integrate MIME decoding into reading of MIME body parts by
  fluid-binding the decoder as a handler for the MIME response reader.
  Use this same mechanism to read MIME attachments directly into
  files.

* Header parser should strip leading and trailing whitespace in the
  header value.  It can also strip whitespace at the ends of lines.
  Strictly speaking, this isn't correct, but I don't know of any
  situation in which it would cause problems.

* Move pathname-completion code into the runtime system.

* Repackage the code so that each file now in the core is in a
  separate package.

* Reimplement UID synchronization.  Take advantage of monotonic UID
  numbers to discover largest prefix range that hasn't changed.
  Binary search can be used which should produce excellent results on
  large folders.  UID FETCH command should be useful for this.

* Try to leverage IMAP MIME parser by building compatible
  interface for file-based folders.

* Change file URLs to follow specification in RFC1738, which requires
  the use of forward slashes and encoding.  Take advantage of relative
  URLs as specified in RFC1808.  Maybe change URL representation to
  have a heirarchical path structure so that we can write MERGE-URLS.
