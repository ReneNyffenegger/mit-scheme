IMAIL To-Do List
$Id: todo.txt,v 1.123 2001/05/29 20:42:17 cph Exp $

Bug fixes
---------

* Problem: when running C-u M-x imail for the first time (and also M-x
  imail-browse-container), we establish a connection to the server
  just to probe the folder for FOLDER-URL-IS-SELECTABLE? (or
  URL-EXISTS?), then tear down the connection.  Right after that, the
  connection is re-established and thereafter held open.  The
  situation is even worse for imail-browse-container, since it must
  re-open the connection any time anything happens.

  The problem with imail-browse-container can be ameliorated by
  opening a connection as part of the process of opening the container
  object, and then closing the connection when the buffer is killed.
  This is analogous to the method used for folder buffers.

  The other problem can be fixed by keeping unused connections open,
  shutting them down only after they have been idle for a little while
  (perhaps 10 seconds or even 5).  This has a different (minor) problem in
  that actions of the user that are intended to shut down the
  connection will have a delayed effect.

* The RENAME-FOLDER operation must change the folder object to refer
  to the new URL rather than the old.  The operation must close the
  folder if it is open, then discard all the state, and finally
  reinitialize it to be a closed reference to the new URL.

* When network connection gets wedged, Edwin locks up and can't be
  interrupted with C-g.  This is fundamentally an Edwin problem, but
  it occurs much more frequently with IMAIL.  See if there's a better
  way to handle this -- if Edwin were running under a terminal window,
  it would have a real interrupt character, which would do what we
  want.  This should happen under X as well.

  [I think this should be improved now that I've fixed the problem
  with `poll' not handling errors right.]

* When Rmail parser encounters corruption, tell the user what message
  is corrupted and attempt to recover the parse by looking for the
  beginning of another message.

MIME conformance
----------------

* Implement codec for =?x?y?z?= header notation.  Use codec to do
  encoding/decoding in header fields.

* When sending message attachments, examine them to see if they are
  properly encoded for 7bit transmission.  If not, encode them as
  needed.  When a message is already encoded but violates the spec,
  decode and re-encode it.

New features
------------

* Add ability to sort summary by sender.  May as well allow sorting on
  other fields as well.  And once that's done, allow user to specify
  multi-key sorting, such as "sort by sender, then by reverse date".

* Implement generic operation to say whether a folder is open or
  closed.  This is needed to implement a command that closes open
  folders, prompting the user for each folder.

* Implement decoder for uuencoded attachments.  Agnes recently sent me
  a message with a uuencoded attachment.

* Allow the user to specify that elements of a MIME digest are to be
  treated as out-of-line rather than inline.  In this case the
  attachment summaries need to show the "from" and "subject" headers
  so that the digest can be browsed.  We will also need commands to
  toggle all of the elements between in-line and out-of-line.

* Implement generic operation to say whether a folder rename can work.
  Use this to extend M-x imail-rename-folder to work in all cases by
  using copy/delete when rename inapplicable.

* Examine spec for text/enriched and see if it can be incorporated
  into the reader.

* Implement cache that saves information about messages on disk.  This
  should use UIDs for IMAP folders; for other folders perhaps the
  message ID can be used.

* Set the IMAIL buffer's modification bit to indicate whether the
  folder is locally modified.  Meaningful only for file folders.  Hook
  up the save-folder code into M-x save-some-buffers.

* Implement file backup when writing file folders.

* Generate file I/O messages when reading and writing file folders.

Design changes
--------------

* Move pathname-completion code into the runtime system.

* Implement something closer to the IMAP COPY operation, e.g.
  APPEND-MESSAGES.  Use this to make folder copying faster.

* Reimplement UID synchronization.  Take advantage of monotonic UID
  numbers to discover largest prefix range that hasn't changed.
  Binary search can be used which should produce excellent results on
  large folders.  UID FETCH command should be useful for this.

* Try to leverage IMAP MIME parser by building compatible
  interface for file-based folders.
