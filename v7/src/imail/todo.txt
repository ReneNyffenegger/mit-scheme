IMAIL To-Do List
$Id: todo.txt,v 1.105 2000/06/30 03:11:08 cph Exp $

Bug fixes
---------

MIME conformance
----------------

* Implement codec for =?x?y?z?= header notation.  Use codec to do
  encoding/decoding in header fields.

* When sending message attachments, examine them to see if they are
  properly encoded for 7bit transmission.  If not, encode them as
  needed.  When a message is already encoded but violates the spec,
  decode and re-encode it.

* Don't inline anything other than text.  (Although message/rfc822
  should also be shown, though the spec doesn't say so.)

New features
------------

* Implement generic operation to say whether a folder rename can work.
  Use this to extend M-x imail-rename-folder to work in all cases by
  using copy/delete when rename inapplicable.

* Examine spec for text/enriched and see if it can be incorporated
  into the reader.

* When yanking a message into a reply buffer, need option to quote the
  original message using MIME, rather than the current copy-and-indent
  mechanism.

* Set the IMAIL buffer's modification bit to indicate whether the
  folder is locally modified.  Meaningful only for file folders.  Hook
  up the save-folder code into M-x save-some-buffers.

* Implement cache that saves information about messages on disk.  This
  should use UIDs for IMAP folders; for other folders perhaps the
  message ID can be used.  (Or perhaps no cache is required for
  non-IMAP folders.)

* Implement file backup when writing file folders.

* Write folder browser for IMAP servers.  Implement
  AVAILABLE-FOLDER-NAMES.

* Generate file I/O messages when reading and writing file folders.

* Implement something closer to the IMAP COPY operation, e.g.
  APPEND-MESSAGES.

Design changes
--------------

* Integrate MIME decoding into reading of MIME body parts by
  fluid-binding the decoder as a handler for the MIME response reader.
  Use this same mechanism to read MIME attachments directly into
  files.

* Move pathname-completion code into the runtime system.

* Repackage the code so that each file now in the core is in a
  separate package.

* Reimplement UID synchronization.  Take advantage of monotonic UID
  numbers to discover largest prefix range that hasn't changed.
  Binary search can be used which should produce excellent results on
  large folders.  UID FETCH command should be useful for this.

* Try to leverage IMAP MIME parser by building compatible
  interface for file-based folders.

* Change file URLs to follow specification in RFC1738, which requires
  the use of forward slashes and encoding.  Take advantage of relative
  URLs as specified in RFC1808.  Maybe change URL representation to
  have a heirarchical path structure so that we can write MERGE-URLS.
