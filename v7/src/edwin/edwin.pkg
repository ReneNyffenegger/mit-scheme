#| -*-Scheme-*-

$Header: /Users/cph/tmp/foo/mit-scheme/mit-scheme/v7/src/edwin/edwin.pkg,v 1.33 1991/04/26 03:11:56 cph Exp $

Copyright (c) 1989-91 Massachusetts Institute of Technology

This material was developed by the Scheme project at the Massachusetts
Institute of Technology, Department of Electrical Engineering and
Computer Science.  Permission to copy this software, to redistribute
it, and to use it for any purpose is granted, subject to the following
restrictions and understandings.

1. Any copy made of this software must include this copyright notice
in full.

2. Users of this software agree to make their best efforts (a) to
return to the MIT Scheme project any improvements or extensions that
they make, so that these may be included in future releases; and (b)
to inform MIT of noteworthy uses of this software.

3. All materials developed as a consequence of the use of this
software shall duly acknowledge such use, in accordance with the usual
standards of acknowledging credit in academic research.

4. MIT has made no warrantee or representation that the operation of
this software will be error-free, and MIT is under no obligation to
provide any services, by way of maintenance, update, or otherwise.

5. In conjunction with products arising from the use of this material,
there shall be no use of the name of the Massachusetts Institute of
Technology nor of any adaptation thereof in any advertising,
promotional, or sales literature without prior written consent from
MIT in each case. |#

;;;; Edwin Packaging

(global-definitions "../runtime/runtim")

(define-package (edwin)
  (files "utils"
	 "nvector"
	 "ring"
	 "strtab"
	 "strpad"
	 "class"
	 "unix"

	 "paths"
	 "struct"
	 "regops"
	 "motion"
	 "search"
	 "image"
	 "comman"
	 "modes"
	 "buffer"
	 "bufset"
	 "winren"			; window system rename targets

	 "edtstr"			; editor abstraction
	 "editor"			; editor top level
	 "curren"			; current state
	 "simple"			; simple editing operations
	 "debuge"			; edwin debugging tools
	 "calias"			; character aliasing
	 "things"			; generic text objects
	 "tparse"			; text parsing
	 "syntax"			; word and list parsing
	 "fileio"			; file <-> buffer

	 "autold"			; autoloaded definitions
	 "autosv"			; auto save
	 "basic"			; basic commands
	 "bufcom"			; buffer commands
	 "comint"			; command interpreter process stuff
	 "evlcom"			; evaluation commands
	 "filcom"			; file commands
	 "fill"				; text fill commands
	 "hlpcom"			; help commands
	 "intmod"			; interaction mode
	 "kilcom"			; kill commands
	 "kmacro"			; keyboard macros
	 "lincom"			; line commands
	 "lspcom"			; lisp commands
	 "motcom"			; motion commands
	 "replaz"			; replace commands
	 "schmod"			; scheme mode
	 "scrcom"			; screen commands
	 "sercom"			; search commands
	 "shell"			; shell subprocess commands
	 "texcom"			; text commands
	 "wincom"			; window commands

	 "modefs"			; fundamental mode

	 "loadef"
	 "c-mode"
	 "midas"
	 "pasmod"
	 "tximod")
  (parent ())
  (export (edwin class-macros)
	  class-instance-transforms)
  (export ()
	  create-editor
	  create-editor-args
	  edit
	  edwin
	  inhibit-editor-init-file?
	  reset-editor
	  reset-editor-windows))

(define-package (edwin class-macros)
  (files "clsmac")
  (parent ())
  (export (edwin)
	  class-syntax-table))

(define-package (edwin class-macros transform-instance-variables)
  (files "xform")
  (parent ())
  (export (edwin class-macros)
	  transform-instance-variables))

(define-package (edwin class-constructor)
  (files "clscon")
  (parent (edwin))
  (export (edwin)
	  class?
	  make-class
	  name->class)
  (export (edwin class-macros)
	  make-class
	  name->class))

(define-package (edwin macros)
  (files "macros")
  (parent ())
  (export (edwin)
	  edwin-syntax-table)
  (export (edwin class-macros)
	  edwin-syntax-table)
  (export (edwin)
	  canonicalize-name
	  command-name->scheme-name
	  mode-name->scheme-name
	  variable-name->scheme-name))

(define-package (edwin group-operations)
  (files "grpops")
  (parent (edwin))
  (export (edwin)
	  %group-insert-char!
	  %group-insert-substring!
	  gap-allocation-extra
	  group-delete!
	  group-delete-left-char!
	  group-delete-right-char!
	  group-extract-and-delete-string!
	  group-extract-string
	  group-insert-char!
	  group-insert-string!
	  group-insert-substring!
	  group-left-char
	  group-right-char
	  guarantee-gap-length!
	  move-gap-to!))

(define-package (edwin comtab)
  (files "comtab")
  (parent (edwin))
  (export (edwin)
	  comtab->alist
	  comtab-entry
	  comtab-dispatch-alists
	  comtab-key-bindings
	  comtab?
	  define-default-key
	  define-key
	  define-prefix-key
	  make-comtab
	  prefix-char-list?))

(define-package (edwin undo)
  (files "undo")
  (parent (edwin))
  (export (edwin)
	  disable-group-undo!
	  enable-group-undo!
	  undo-boundary!
	  undo-done!
	  undo-record-deletion!
	  undo-record-insertion!))

(define-package (edwin display-type)
  (files "display")
  (parent (edwin))
  (export ()
	  editor-display-types)
  (export (edwin)
	  display-type?
	  display-type/available?
	  display-type/get-input-operations
	  display-type/make-screen
	  display-type/multiple-screens?
	  display-type/name
	  display-type/with-display-grabbed
	  display-type/with-interrupts-disabled
	  display-type/with-interrupts-enabled
	  make-display-type
	  name->display-type))

(define-package (edwin screen)
  (files "screen")
  (parent (edwin))
  (export (edwin)
	  initialize-screen-root-window!
	  screen-beep
	  screen-clear-rectangle
	  screen-direct-output-char
	  screen-direct-output-move-cursor
	  screen-direct-output-substring
	  screen-discard!
	  screen-enter!
	  screen-exit!
	  screen-get-output-line
	  screen-in-update?
	  screen-line-draw-cost
	  screen-modeline-event!
	  screen-move-cursor
	  screen-needs-update?
	  screen-output-char
	  screen-output-substring
	  screen-root-window
	  screen-scroll-lines-down
	  screen-scroll-lines-up
	  screen-select-cursor!
	  screen-select-window!
	  screen-selected-window
	  screen-state
	  screen-typein-window
	  screen-window-list
	  screen-window0
	  screen-x-size
	  screen-y-size
	  set-screen-debug-trace!
	  set-screen-root-window!
	  update-screen!
	  window-screen
	  with-screen-in-update)
  (export (edwin console-screen)
	  make-screen)
  (export (edwin x-screen)
	  make-screen
	  set-screen-size!))

(define-package (edwin x-screen)
  (files "xterm")
  (parent (edwin))
  (export (edwin)
	  x-display-type)
  (export (edwin x-commands)
	  screen-xterm)
  (initialization (initialize-package!)))

(define-package (edwin x-commands)
  (files "xcom")
  (parent (edwin))
  (export (edwin)
	  x-button1-down
	  x-button2-down
	  x-button3-down
	  x-button4-down
	  x-button5-down
	  x-button1-up
	  x-button2-up
	  x-button3-up
	  x-button4-up
	  x-button5-up)
  (export (edwin x-screen)
	  update-xterm-screen-names!))

(define-package (edwin console-screen)
  (files "termcap" "tterm")
  (parent (edwin))
  (export (edwin)
	  console-display-type)
  (import (runtime primitive-io)
	  channel-type=terminal?
	  terminal-get-state
	  terminal-output-baud-rate
	  terminal-raw-input
	  terminal-raw-output
	  terminal-set-state)
  (import (runtime interrupt-handler)
	  hook/^g-interrupt)
  (import (runtime transcript)
	  transcript-port)
  (initialization (initialize-package!)))

(define-package (edwin window)
  (files "window"
	 "utlwin"
	 "bufwin"
	 "bufwfs"
	 "bufwiu"
	 "bufwmc"
	 "modwin"
	 "buffrm"
	 "edtfrm")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$cursor-centering-point
	  edwin-variable$mode-line-inverse-video
	  edwin-variable$scroll-step
	  edwin-variable$tab-width
	  edwin-variable$truncate-lines
	  edwin-variable$truncate-partial-width-windows
	  set-window-debug-trace!
	  set-window-point!
	  set-window-start-mark!
	  window-buffer
	  window-clear-override-message!
	  window-coordinates->mark
	  window-direct-output-backward-char!
	  window-direct-output-forward-char!
	  window-direct-output-insert-char!
	  window-direct-output-insert-newline!
	  window-direct-output-insert-substring!
	  window-direct-update!
	  window-home-cursor!
	  window-mark->coordinates
	  window-mark->x
	  window-mark->y
	  window-mark-visible?
	  window-modeline-event!
	  window-override-message
	  window-point
	  window-point-coordinates
	  window-point-x
	  window-point-y
	  window-root-window
	  window-redraw!
	  window-scroll-y-absolute!
	  window-scroll-y-relative!
	  window-select-time
	  window-set-override-message!
	  window-start-mark
	  window-y-center)
  (export (edwin screen)
	  editor-frame-screen
	  editor-frame-select-cursor!
	  editor-frame-select-window!
	  editor-frame-selected-window
	  editor-frame-typein-window
	  editor-frame-update-display!
	  editor-frame-window0
	  editor-frame-windows
	  make-editor-frame))

(define-package (edwin window combination)
  (files "comwin")
  (parent (edwin window))
  (export (edwin)
	  window+
	  window-
	  window-1+
	  window-delete!
	  window-grow-horizontally!
	  window-grow-vertically!
	  window-has-down-neighbor?
	  window-has-horizontal-neighbor?
	  window-has-left-neighbor?
	  window-has-no-neighbors?
	  window-has-right-neighbor?
	  window-has-up-neighbor?
	  window-has-vertical-neighbor?
	  window-split-horizontally!
	  window-split-vertically!
	  window1+)
  (export (edwin window)
	  combination-leaf-window
	  window0))

(define-package (edwin modeline-string)
  (files "modlin")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$global-mode-string
	  edwin-variable$mode-line-buffer-identification
	  edwin-variable$mode-line-format
	  edwin-variable$mode-line-modified
	  edwin-variable$mode-line-procedure
	  edwin-variable$mode-line-process
	  format-modeline-string
	  modeline-string!))

(define-package (edwin command-reader)
  (files "comred")
  (parent (edwin))
  (export (edwin)
	  abort-current-command
	  command-history-list
	  command-message-receive
	  command-reader
	  command-reader/reset-and-execute
	  current-command
	  current-command-char
	  dispatch-on-char
	  dispatch-on-command
	  execute-char
	  execute-command
	  execute-command-history-entry
	  initialize-command-reader!
	  keyboard-chars-read
	  read-and-dispatch-on-char
	  set-command-message!
	  top-level-command-reader))

(define-package (edwin keyboard)
  (files "input")
  (parent (edwin))
  (export (edwin)
	  append-command-prompt!
	  append-message
	  char-base
	  char-control-metafy
	  char-controlify
	  char-metafy
	  clear-message
	  command-prompt
	  initialize-typeout!
	  keyboard-peek-char
	  keyboard-read-char
	  message
	  message-args->string
	  reset-command-prompt!
	  set-command-prompt!
	  temporary-message))

(define-package (edwin prompt)
  (files "prompt")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$enable-recursive-minibuffers
	  edwin-variable$completion-auto-help
	  initialize-typein!
	  prompt-for-alist-value
	  prompt-for-char
	  prompt-for-command
	  prompt-for-completed-string
	  prompt-for-confirmation?
	  prompt-for-key
	  prompt-for-number
	  prompt-for-string
	  prompt-for-string-table-name
	  prompt-for-string-table-value
	  prompt-for-typein
	  prompt-for-variable
	  prompt-for-yes-or-no?
	  typein-edit-other-window
	  within-typein-edit
	  within-typein-edit?
	  write-completions-list)
  (export (edwin screen)
	  make-typein-buffer-name))

(define-package (edwin buffer-input-port)
  (files "bufinp")
  (parent (edwin))
  (export (edwin)
	  with-input-from-mark
	  with-input-from-region))

(define-package (edwin buffer-output-port)
  (files "bufout")
  (parent (edwin))
  (export (edwin)
	  fresh-line
	  fresh-lines
	  mark->output-port
	  with-output-to-mark))

(define-package (edwin window-output-port)
  (files "winout")
  (parent (edwin))
  (export (edwin)
	  with-interactive-output-port
	  with-output-to-current-point
	  with-output-to-window-point))

(define-package (edwin regular-expression)
  (files "regexp")
  (parent (edwin))
  (export (edwin)
	  delete-match
	  preserving-match-data
	  re-match-buffer-forward
	  re-match-end
	  re-match-end-index
	  re-match-forward
	  re-match-start
	  re-match-start-index
	  re-match-string-forward
	  re-match-substring-forward
	  re-search-backward
	  re-search-buffer-backward
	  re-search-buffer-forward
	  re-search-forward
	  re-search-string-backward
	  re-search-string-forward
	  re-search-substring-backward
	  re-search-substring-forward
	  re-substitute-registers
	  replace-match
	  search-backward
	  search-forward))

(define-package (edwin regular-expression-compiler)
  (files "rgxcmp")
  (parent (edwin))
  (export (edwin)
	  condition-type:re-compile-pattern
	  re-compile-char
	  re-compile-char-set
	  re-compile-pattern
	  re-compile-string
	  re-disassemble-pattern
	  re-quote-string
	  re-translation-table))

(define-package (edwin lisp-indentation)
  (files "linden")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$lisp-body-indent
	  edwin-variable$lisp-indent-hook
	  edwin-variable$lisp-indent-methods
	  edwin-variable$lisp-indent-offset
	  indent-code-rigidly
	  lisp-comment-indentation
	  lisp-comment-locate
	  lisp-indent-definition
	  lisp-indent-line
	  lisp-indent-sexp
	  lisp-indent-special-form
	  standard-lisp-indent-hook))

(define-package (edwin command-argument)
  (files "argred")
  (parent (edwin))
  (export (edwin)
	  command-argument-beginning?
	  command-argument-multiplier-exponent
	  command-argument-multiplier-only?
	  command-argument-negative-only?
	  command-argument-negative?
	  command-argument-prompt
	  command-argument-self-insert?
	  command-argument-standard-value
	  command-argument-standard-value?
	  command-argument-value
	  reset-command-argument-reader!
	  with-command-argument-reader))

(define-package (edwin buffer-menu)
  (files "bufmnu")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$buffer-menu-kill-on-quit))

(define-package (edwin register-command)
  (files "regcom")
  (parent (edwin)))

(define-package (edwin c-indentation)
  (files "cinden")
  (parent (edwin))
  (export (edwin)
	  c-indent-expression
	  c-indent-line:indentation
	  c-inside-parens?
	  edwin-variable$c-argdecl-indent
	  edwin-variable$c-brace-imaginary-offset
	  edwin-variable$c-brace-offset
	  edwin-variable$c-continued-statement-offset
	  edwin-variable$c-indent-level
	  edwin-variable$c-label-offset))

(define-package (edwin incremental-search)
  (files "iserch")
  (parent (edwin))
  (export (edwin)
	  isearch))

(define-package (edwin command-summary)
  (files "keymap")
  (parent (edwin)))

(define-package (edwin debugger)
  (files "debug")
  (parent (edwin))
  (export (edwin)
	  debug-scheme-error)
  (import (runtime debugger)
	  command/condition-report
	  command/condition-restart
	  command/earlier-reduction
	  command/earlier-subproblem
	  command/frame
	  command/goto
	  command/later-reduction
	  command/later-subproblem
	  command/move-to-child-environment
	  command/move-to-parent-environment
	  command/print-environment-procedure
	  command/print-expression
	  command/print-reductions
	  command/print-subproblem-or-reduction
	  command/return
	  command/show-all-frames
	  command/show-current-frame
	  command/summarize-subproblems
	  dstate/environment-list
	  make-initial-dstate)
  (import (runtime debugger-utilities)
	  hook/debugger-failure
	  hook/debugger-message
	  hook/presentation)
  (import (runtime rep)
	  hook/prompt-for-confirmation
	  hook/prompt-for-expression))

(define-package (edwin dired)
  (files "dired")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$dired-listing-switches
	  edwin-variable$list-directory-unpacked
	  make-dired-buffer))

(define-package (edwin info)
  (files "info")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$info-current-file
	  edwin-variable$info-current-node
	  edwin-variable$info-current-subfile
	  edwin-variable$info-directory
	  edwin-variable$info-enable-active-nodes
	  edwin-variable$info-enable-edit
	  edwin-variable$info-history
	  edwin-variable$info-previous-search
	  edwin-variable$info-tag-table-start
	  edwin-variable$info-tag-table-end))

(define-package (edwin rectangle)
  (files "reccom")
  (parent (edwin)))

(define-package (edwin tags)
  (files "tags")
  (parent (edwin))
  (export (edwin)
	  edwin-variable$tags-table-pathname))

(define-package (edwin rcs)
  (files "rcs")
  (parent (edwin)))

(define-package (edwin process)
  (files "process")
  (parent (edwin))
  (export (edwin)
	  accept-process-output
	  buffer-default-directory
	  buffer-processes
	  continue-process
	  delete-process
	  edwin-command$list-processes
	  edwin-variable$exec-path
	  edwin-variable$process-connection-type
	  find-program
	  get-buffer-process
	  get-process-by-name
	  hangup-process
	  initialize-processes!
	  interrupt-process
	  kill-process
	  notify-process-status-changes
	  process-arguments
	  process-arguments->string
	  process-buffer
	  process-environment-bind
	  process-exit-reason
	  process-filter
	  process-kill-without-query
	  process-list
	  process-mark
	  process-name
	  process-runnable?
	  process-send-char
	  process-send-eof
	  process-send-string
	  process-send-substring
	  process-sentinel
	  process-status
	  process-status-message
	  quit-process
	  set-process-buffer!
	  set-process-filter!
	  set-process-kill-without-query!
	  set-process-sentinel!
	  shell-command
	  shell-command-region
	  start-process
	  stop-process
	  run-synchronous-process))

(define-package (edwin sendmail)
  (files "sendmail")
  (parent (edwin))
  (export (edwin)
	  edwin-mode$mail
	  edwin-variable$mail-archive-file-name
	  edwin-variable$mail-default-reply-to
	  edwin-variable$mail-header-separator
	  edwin-variable$mail-interactive
	  edwin-variable$mail-mode-hook
	  edwin-variable$mail-reply-buffer
	  edwin-variable$mail-self-blind
	  edwin-variable$mail-yank-ignored-headers
	  edwin-variable$send-mail-procedure
	  edwin-variable$sendmail-program
	  make-mail-buffer))

(define-package (edwin mail-alias)
  (files "malias")
  (parent (edwin))
  (export (edwin)
	  define-mail-alias
	  expand-mail-aliases
	  guarantee-mail-aliases))