;;; -*-Scheme-*-
;;;
;;; $Id: edwin.sf,v 1.24 2000/03/02 18:40:01 cph Exp $
;;;
;;; Copyright (c) 1991-2000 Massachusetts Institute of Technology
;;;
;;; This program is free software; you can redistribute it and/or
;;; modify it under the terms of the GNU General Public License as
;;; published by the Free Software Foundation; either version 2 of the
;;; License, or (at your option) any later version.
;;;
;;; This program is distributed in the hope that it will be useful,
;;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
;;; General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with this program; if not, write to the Free Software
;;; Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

(load-option 'CREF)

(let ((package-name
       (case microcode-id/operating-system
	 ((DOS) "edwindos")
	 ((NT) "edwinw32")
	 ((OS/2) "edwinos2")
	 ((UNIX) "edwinunx")
	 (else "edwinunk"))))
  (let ((new-filename (pathname-new-type package-name "pkg")))
    (delete-file-no-errors new-filename)
    (copy-file "edwin.pkg" new-filename))

(if (not (name->package '(EDWIN)))
    (begin
      (if (not (file-exists? (pathname-new-type package-name "bco")))
	  (begin
	    ((access cref/generate-trivial-constructor
		     (->environment '(CROSS-REFERENCE)))
	     package-name)
	    (sf (pathname-new-type package-name "con"))))
      (load (pathname-new-type package-name "bco"))))

(if (lexical-unreferenceable? (->environment '(EDWIN CLASS-CONSTRUCTOR))
			      'CLASS-DESCRIPTORS)
    (begin
      (let ((sf-and-load
	     (lambda (files package)
	       (fluid-let ((sf/default-syntax-table
			    syntax-table/system-internal))
		 (sf-conditionally files))
	       (for-each (lambda (file)
			   (load (string-append file ".bin") package))
			 files))))
	(sf-and-load '("macros") '(EDWIN MACROS))
	(sf-and-load '("clsmac") '(EDWIN CLASS-MACROS))
	(sf-and-load '("xform")
		     '(EDWIN CLASS-MACROS TRANSFORM-INSTANCE-VARIABLES))
	(sf-and-load '("class") '(EDWIN))
	(sf-and-load '("clscon") '(EDWIN CLASS-CONSTRUCTOR)))))

(let ((read-class-definitions
       (let ((syntax-table
	      (access class-syntax-table (->environment '(EDWIN)))))
	 (lambda (filename)
	   (fresh-line)
	   (write-string "Pre-loading class definitions from ")
	   (write filename)
	   (syntax* (read-file (string-append filename ".scm"))
		    syntax-table)
	   (write-string " -- done")
	   (newline)))))
  (read-class-definitions "window")
  (read-class-definitions "utlwin")
  (read-class-definitions "modwin")
  (read-class-definitions "bufwin")
  (read-class-definitions "comwin")
  (read-class-definitions "buffrm")
  (read-class-definitions "edtfrm"))

(load "decls")

(let ((generate
       (in-package (->environment '(CROSS-REFERENCE))
	 (generate/common
	  (lambda (pathname pmodel changes?)
	    (write-cref-unusual pathname pmodel changes?)
	    (write-globals pathname pmodel changes?)
	    (write-constructor pathname pmodel changes?))))))
  (generate package-name)
  (sf-conditionally (pathname-new-type package-name "con"))
  (if (and (file-exists? (pathname-new-type package-name "avd"))
	   (not (file-processed? package-name "avd" "bad")))
      (fasdump (read-file (pathname-new-type package-name "avd"))
	       (pathname-new-type package-name "bad"))))
(sf-conditionally "edwin.ldr")

)