;;; -*-Scheme-*-
;;;
;;;	$Header: /Users/cph/tmp/foo/mit-scheme/mit-scheme/v7/src/edwin/edwin.sf,v 1.9 1991/03/10 05:21:17 cph Exp $
;;;
;;;	Copyright (c) 1991 Massachusetts Institute of Technology
;;;
;;;	This material was developed by the Scheme project at the
;;;	Massachusetts Institute of Technology, Department of
;;;	Electrical Engineering and Computer Science.  Permission to
;;;	copy this software, to redistribute it, and to use it for any
;;;	purpose is granted, subject to the following restrictions and
;;;	understandings.
;;;
;;;	1. Any copy made of this software must include this copyright
;;;	notice in full.
;;;
;;;	2. Users of this software agree to make their best efforts (a)
;;;	to return to the MIT Scheme project any improvements or
;;;	extensions that they make, so that these may be included in
;;;	future releases; and (b) to inform MIT of noteworthy uses of
;;;	this software.
;;;
;;;	3. All materials developed as a consequence of the use of this
;;;	software shall duly acknowledge such use, in accordance with
;;;	the usual standards of acknowledging credit in academic
;;;	research.
;;;
;;;	4. MIT has made no warrantee or representation that the
;;;	operation of this software will be error-free, and MIT is
;;;	under no obligation to provide any services, by way of
;;;	maintenance, update, or otherwise.
;;;
;;;	5. In conjunction with products arising from the use of this
;;;	material, there shall be no use of the name of the
;;;	Massachusetts Institute of Technology nor of any adaptation
;;;	thereof in any advertising, promotional, or sales literature
;;;	without prior written consent from MIT in each case.
;;;
;;; NOTE: Parts of this program (Edwin) were created by translation
;;; from corresponding parts of GNU Emacs.  Users should be aware that
;;; the GNU GENERAL PUBLIC LICENSE may apply to these parts.  A copy
;;; of that license should have been included along with this file.
;;;

(if (not (name->package '(CROSS-REFERENCE)))
    (with-working-directory-pathname "../cref" (lambda () (load "make"))))

(if (not (name->package '(EDWIN)))
    (begin
      (if (not (file-exists? "edwin.bcon"))
	  (begin
	    ((access cref/generate-trivial-constructor
		     (->environment '(CROSS-REFERENCE)))
	     "edwin")
	    (sf "edwin.con" "edwin.bcon")))
      (load "edwin.bcon")))

(if (lexical-unreferenceable? (->environment '(EDWIN CLASS-CONSTRUCTOR))
			      'CLASS-DESCRIPTORS)
    (begin
      (let ((sf-and-load
	     (lambda (files package)
	       (fluid-let ((sf/default-syntax-table
			    syntax-table/system-internal))
		 (sf-conditionally files))
	       (for-each (lambda (file)
			   (load (string-append file ".bin") package))
			 files))))
	(sf-and-load '("macros") '(EDWIN MACROS))
	(sf-and-load '("clsmac") '(EDWIN CLASS-MACROS))
	(sf-and-load '("xform")
		     '(EDWIN CLASS-MACROS TRANSFORM-INSTANCE-VARIABLES))
	(sf-and-load '("class") '(EDWIN))
	(sf-and-load '("clscon") '(EDWIN CLASS-CONSTRUCTOR)))))

(let ((read-class-definitions
       (let ((syntax-table
	      (access class-syntax-table (->environment '(EDWIN)))))
	 (lambda (filename)
	   (write-string "\nPre-loading class definitions from ")
	   (write filename)
	   (syntax* (read-file (string-append filename ".scm"))
		    syntax-table)
	   (write-string " -- done")))))
  (read-class-definitions "window")
  (read-class-definitions "utlwin")
  (read-class-definitions "modwin")
  (read-class-definitions "bufwin")
  (read-class-definitions "comwin")
  (read-class-definitions "buffrm")
  (read-class-definitions "edtfrm"))

(load "decls")

(in-package (->environment '(CROSS-REFERENCE))
  ((generate/common
    (lambda (pathname pmodel)
      (write-cref-unusual pathname pmodel)
      (write-globals pathname pmodel)
      (write-constructor pathname pmodel)))
   "edwin"))
(sf "edwin.con" "edwin.bcon")
(if (not (file-processed? "edwin" "ldr" "bldr"))
    (sf "edwin.ldr" "edwin.bldr"))