#| -*-Scheme-*-

$Id: edwin.ldr,v 1.54 1995/02/14 00:30:37 cph Exp $

Copyright (c) 1989-95 Massachusetts Institute of Technology

This material was developed by the Scheme project at the Massachusetts
Institute of Technology, Department of Electrical Engineering and
Computer Science.  Permission to copy this software, to redistribute
it, and to use it for any purpose is granted, subject to the following
restrictions and understandings.

1. Any copy made of this software must include this copyright notice
in full.

2. Users of this software agree to make their best efforts (a) to
return to the MIT Scheme project any improvements or extensions that
they make, so that these may be included in future releases; and (b)
to inform MIT of noteworthy uses of this software.

3. All materials developed as a consequence of the use of this
software shall duly acknowledge such use, in accordance with the usual
standards of acknowledging credit in academic research.

4. MIT has made no warrantee or representation that the operation of
this software will be error-free, and MIT is under no obligation to
provide any services, by way of maintenance, update, or otherwise.

5. In conjunction with products arising from the use of this material,
there shall be no use of the name of the Massachusetts Institute of
Technology nor of any adaptation thereof in any advertising,
promotional, or sales literature without prior written consent from
MIT in each case. |#

;;; program to load package contents
;;; **** This program (unlike most .ldr files) is not generated by a program.

(declare (usual-integrations))

(lambda (package/loader key-alist)
  (let ((to-avoid-list (if (file-exists? "edwin.bad")
			   (fasload "edwin.bad")
			   '()))
	(bad-environment-tag '*BAD-ENVIRONMENT*))
    (let ((->environment
	   (lambda (spec)
	     (if (name->package spec)
		 (->environment spec)
		 (cons bad-environment-tag spec)))))
      (define (load file env)
	(cond ((string-member? file to-avoid-list)
	       (newline)
	       (write-string "* skipping ")
	       (write-string file)
	       false)
	      ((and (pair? env)
		    (eq? (car env) bad-environment-tag))
	       (error "Attempting to load into non-existent package"
		      file (cdr env)))
	      (else (package/loader file env)
		    true)))
      (define (load-set files env)
	(if (null? files)
	    true
	    (let ((val (load (car files) env)))
	      (boolean-and val (load-set (cdr files) env)))))
      (define (load-set-and-initialize! files env)
	(and (load-set files env)
	     ((access initialize-package! env))))
      (define (lookup var)
	(cond ((assq var key-alist) => cdr)
	      (else false)))
      (define (load-case var alist env)
	(for-each (lambda (key/file)
		    (and (eq? (lookup var) (car key/file))
			 (load (cdr key/file) env)))
		  alist))
      (define string-member? (member-procedure string=?))
      (define (boolean-and a b) (and a b))

      (if (eq? (lookup 'OS-TYPE) 'UNIX)
	  ;; #T means no error if not present.
	  (load-option 'KRYPT #t))
      (if (memq (lookup 'OS-TYPE) '(UNIX OS/2))
	  (load-option 'SUBPROCESS))
      (load-option 'RB-TREE)
      (load-option 'HASH-TABLE)

      (let ((environment (->environment '(EDWIN))))
	(load "utils" environment)
	(load "nvector" environment)
	(load "ring" environment)
	(load "strtab" environment)
	(load "strpad" environment)
	(load "macros" (->environment '(EDWIN MACROS)))
	(load "class" environment)
	(load "clscon" (->environment '(EDWIN CLASS-CONSTRUCTOR)))
	(load "clsmac" (->environment '(EDWIN CLASS-MACROS)))
	(load "xform"
	      (->environment
	       '(EDWIN CLASS-MACROS TRANSFORM-INSTANCE-VARIABLES)))
	(load "paths" environment)
	(load "struct" environment)
	(load "grpops" (->environment '(EDWIN GROUP-OPERATIONS)))
	(load "txtprp" (->environment '(EDWIN TEXT-PROPERTIES)))
	(load "regops" environment)
	(load "motion" environment)
	(load "search" environment)
	(load "image" environment)
	(load "comman" environment)
	(load "docstr" environment)
	(if (not (memq (lookup 'OS-TYPE) '(DOS NT)))
	    (set! (access *external-doc-strings?* environment) #f))
	(load "comtab" (->environment '(EDWIN COMTAB)))
	(load "modes" environment)
	(load "buffer" environment)
	(load "bufset" environment)
	(load "undo" (->environment '(EDWIN UNDO)))
	(load "display" (->environment '(EDWIN DISPLAY-TYPE)))
	(load "screen" (->environment '(EDWIN SCREEN)))
	(load "winren" environment)

	(let ((environment (->environment '(EDWIN WINDOW))))
	  (load "window" environment)
	  (load "utlwin" environment)
	  (load "bufwin" environment)
	  (load "bufwfs" environment)
	  (load "bufwiu" environment)
	  (load "bufwmc" environment)
	  (load "comwin" (->environment '(EDWIN WINDOW COMBINATION)))
	  (load "modwin" environment)
	  (load "buffrm" environment)
	  (load "edtfrm" environment))

	(load "calias" environment)
	(load "edtstr" environment)
	(load "editor" environment)
	(load "curren" environment)
	(load "simple" environment)
	(load "debuge" environment)
	(load "modlin" (->environment '(EDWIN MODELINE-STRING)))
	(load "input" (->environment '(EDWIN KEYBOARD)))
	(load "prompt" (->environment '(EDWIN PROMPT)))
	(load "comred" (->environment '(EDWIN COMMAND-READER)))
	(load "bufinp" (->environment '(EDWIN BUFFER-INPUT-PORT)))
	(load "bufout" (->environment '(EDWIN BUFFER-OUTPUT-PORT)))
	(load "winout" (->environment '(EDWIN WINDOW-OUTPUT-PORT)))
	(load "things" environment)
	(load "tparse" environment)
	(load "syntax" environment)
	(load "regexp" (->environment '(EDWIN REGULAR-EXPRESSION)))
	(load "rgxcmp" (->environment '(EDWIN REGULAR-EXPRESSION-COMPILER)))
	(load "linden" (->environment '(EDWIN LISP-INDENTATION)))

	(load-case 'OS-TYPE
		   '((UNIX . "unix")
		     (DOS . "dos")
		     (NT . "dos")
		     (OS/2 . "os2"))
		   environment)

	(load "fileio" environment)

	(if (not (eq? 'OS/2 (lookup 'OS-TYPE)))
	    (let ((env (->environment '(EDWIN SCREEN CONSOLE-SCREEN))))
	      (load-set-and-initialize! '("termcap" "tterm") env)
	      (if (memq (lookup 'OS-TYPE) '(DOS NT))
		  (begin
		    (load "ansi" env)
		    (if (load "bios" env)
			((access bios-initialize-package! env)))))))

        (case (lookup 'OS-TYPE)
	  ((NT)
	   (load-set-and-initialize! '("win32")
				     (->environment '(EDWIN SCREEN WIN32)))
	   (load-set-and-initialize! '("key-w32")
				     (->environment '(EDWIN WIN32-KEYS))))
	  ((UNIX)
	   (load-set-and-initialize! '("xterm")
				     (->environment '(EDWIN SCREEN X-SCREEN)))
	   (load-set-and-initialize! '("key-x11")
				     (->environment '(EDWIN X-KEYS))))
	  ((OS/2)
	   (load-set-and-initialize! '("os2term")
				     (->environment
				      '(EDWIN SCREEN OS2-SCREEN)))))

	(load-case 'OS-TYPE
		   '((UNIX . "process")
		     (OS/2 . "process")
		     (DOS . "dosproc")
		     (NT . "dosproc"))
		   (->environment '(EDWIN PROCESS)))

	(load "mousecom" environment)
        (case (lookup 'OS-TYPE)
	  ((UNIX) (load "xcom" (->environment '(EDWIN X-COMMANDS))))
	  ((NT) (load "win32com" (->environment '(EDWIN WIN-COMMANDS))))
	  ((OS/2) (load "os2com" (->environment '(EDWIN OS2-COMMANDS)))))
	;; debug depends on button1-down defined in mousecom
	(load "debug" (->environment '(EDWIN DEBUGGER)))

	(let ((env (->environment '(EDWIN DIRED))))
	  (load "dired" env)
	  (case (lookup 'OS-TYPE)
	    ((UNIX) (load "dirunx" env))
	    ((OS/2) (load "diros2" env))))

	(load "argred" (->environment '(EDWIN COMMAND-ARGUMENT)))
	(load "autold" environment)
	(load "autosv" environment)
	(load "basic" environment)
	(load "bufcom" environment)
	(load "bufmnu" (->environment '(EDWIN BUFFER-MENU)))
	(load "c-mode" environment)
	(load "cinden" (->environment '(EDWIN C-INDENTATION)))
	(load "comhst" environment)
	(load "comint" environment)
	(load "compile" environment)
	(load "dabbrev" environment)
	(load "evlcom" environment)
	(load "filcom" environment)
	(load "fill" environment)
	(load "hlpcom" environment)
	(load "info" (->environment '(EDWIN INFO)))
	(load "intmod" (->environment '(EDWIN INFERIOR-REPL)))
	(load "keymap" (->environment '(EDWIN COMMAND-SUMMARY)))
	(load "kilcom" environment)
	(load "kmacro" environment)
	(load "lincom" environment)
	(load "lspcom" environment)
	(load "malias" (->environment '(EDWIN MAIL-ALIAS)))
	(load "motcom" environment)
	(load "occur" (->environment '(EDWIN OCCURRENCE)))
	(load "outline" environment)
	;;(load "rcs" (->environment '(EDWIN RCS)))
	(load "reccom" (->environment '(EDWIN RECTANGLE)))
	(load "regcom" (->environment '(EDWIN REGISTER-COMMAND)))
	(load "replaz" environment)
	(load "rmail" (->environment '(EDWIN RMAIL)))
	(load "rmailsum" (->environment '(EDWIN RMAIL)))
	(load "rmailsrt" (->environment '(EDWIN RMAIL)))
	(load "schmod" environment)
	(load "sendmail" (->environment '(EDWIN SENDMAIL)))
	(load "sercom" environment)
	(load "iserch" (->environment '(EDWIN INCREMENTAL-SEARCH)))
	(load "shell" environment)
	(load "tagutl" (->environment '(EDWIN TAGS)))
	(load "texcom" environment)
	(if (eq? (lookup 'OS-TYPE) 'UNIX)
	    (begin
	      (load "rcsparse" (->environment '(EDWIN RCS-PARSE)))
	      (load "vc" (->environment '(EDWIN VC)))))
	(load "wincom" environment)
	(load "scrcom" environment)
	(load "modefs" environment)
	(load "rename" environment)
	(load "loadef" environment)
	#|
	(load-set-and-initialize! '("bochser" "bochsmod")
				  (->environment '(EDWIN BOCHSER)))
	|#
	(load "notify" environment)
	(if (access *external-doc-strings?* environment)
	    (begin
	      (set! (access *external-doc-strings?* environment) false)
	      (warn "Remember to use ``dump-doc-strings''!")))))))