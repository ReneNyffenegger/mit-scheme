/* -*- C -*-
   Switzerland local additions to the makefile
   $Header: /Users/cph/tmp/foo/mit-scheme/mit-scheme/v7/src/microcode/unxutl/Attic/y300.lcl,v 1.20 1992/02/04 16:00:13 jinx Exp $
 */

COMMON_OBJECTS = $(CORE_OBJECTS) $(STD_GC_OBJECTS) $(UNIX_OBJECTS) $(OS_PRIM_OBJECTS)

/* These extra files are for 6003.  They assume we're using HP-UX. */

6003_SOURCES = $(X_SOURCES) $(TERMCAP_OBJECTS) $(GRAPHICS_SOURCES)\
	SOURCES_SYSTEM SOURCES_MACHINE Sgraph_ar.c fft.c array.c\
       image.c
6003_OBJECTS = $(X_OBJECTS) $(TERMCAP_OBJECTS) $(GRAPHICS_OBJECTS)\
	OBJECTS_SYSTEM OBJECTS_MACHINE Sgraph_ar.o fft.o array.o\
       image.o usr6003.o
6003_LIB =  $(USER_LIBS) $(GRAPHICS_LIBS) $(X_LIB) $(TERMCAP_LIBS)\
	LIB_MATH LIBS_SYSTEM LIBS_MACHINE LIB_DEBUG LIB_STANDARD

/* These extra files are for the toolkit scheme.
   Vanilla scheme microcode + gpio primitives.
 */

/* This is a kludge.  The real library is libdvio.a, but the gnu linker
   does not like it because it defines _write but not __write, required
   by printf and family.  Thus the linker loads write.o from the standard
   library, and complains about a duplicate definition of _write!
   libndvio.a is a copy of libdvio.a with __dup, ___fcntl, _ioctl, __open,
   __read, and __write defined to the same values as the names with
   only one underscore.
*/

#if 0
#define LIB_DVIO -ldvio
#else
#define LIB_DVIO -lndvio
#endif

KIT_SOURCES = $(X_SOURCES) $(TERMCAP_SOURCES) $(GRAPHICS_SOURCES)\
	SOURCES_SYSTEM SOURCES_MACHINE gpio.c
KIT_OBJECTS = $(X_OBJECTS) $(TERMCAP_OBJECTS) $(GRAPHICS_OBJECTS)\
	OBJECTS_SYSTEM OBJECTS_MACHINE gpio.o usrkit.o
KIT_LIB = $(USER_LIBS) $(GRAPHICS_LIBS) $(X_LIB) $(TERMCAP_LIBS)\
	LIB_MATH LIBS_SYSTEM LIBS_MACHINE LIB_DEBUG LIB_STANDARD LIB_DVIO

/* Franklyn's personal scheme: 6003-like + Sgraph_xt. */

LYN_SOURCES = $(X_SOURCES) $(CTERM_SOURCES) $(GRAPHICS_SOURCES)\
	unixprim.c  Sgraph_ar.c Sgraph_xt.c fft.c array.c image.c
LYN_OBJECTS = $(X_OBJECTS) $(CTERM_OBJECTS) $(GRAPHICS_OBJECTS)\
	unixprim.o  Sgraph_ar.o Sgraph_xt.o fft.o array.o image.o\
	usrLYN.o
LYN_LIB =  $(USER_LIBS) $(GRAPHICS_LIBS) $(X_LIB) $(CTERM_LIB)\
	-lm

world: all scm6003 kitscheme

everything: world Ppband

install.world: install scm6003
	-mv -f $(BINDIR)/scm6003 $(BINDIR)/scm6003.busy
	rm -f $(BINDIR)/scm6003.busy
	$(INSTALL) scm6003 $(BINDIR)/scm6003
	-mv -f $(BINDIR)/kitscheme $(BINDIR)/kitscheme.busy
	rm -f $(BINDIR)/kitscheme.busy
	$(INSTALL) kitscheme $(BINDIR)/kitscheme

scm6003 : $(COMMON_OBJECTS) $(6003_OBJECTS)
	@ECHO "#** Re-linking" $@ because of $?
	rm -f $@
	$(CC) $(LDFLAGS) -o $@ $(COMMON_OBJECTS) $(6003_OBJECTS) $(6003_LIB)

usr6003.c : $(6003_SOURCES) $(SOURCES) $(OS_PRIM_SOURCES) usrdef.touch Findprim xmakefile
	@ECHO "#** Re-making" $@ because of $?
	rm -f usr6003.c
	./Findprim $(6003_SOURCES) $(SOURCES) $(OS_PRIM_SOURCES) > usr6003.c

kitscheme : $(COMMON_OBJECTS) $(KIT_OBJECTS)
	@ECHO "#** Re-linking" $@ because of $?
	rm -f $@
#if 1
	$(CC) $(LDFLAGS) -o $@ $(COMMON_OBJECTS) $(KIT_OBJECTS) $(KIT_LIB)
#else
	gld $(LDFLAGS) -noinhibit-exec -o $@ /usr/local/lib/gcc-crt0.o \
	$(COMMON_OBJECTS) $(KIT_OBJECTS) $(KIT_LIB) \
	/usr/local/lib/gcc-gnulib -lc /usr/local/lib/gcc-gnulib
#endif

usrkit.c : $(KIT_SOURCES) $(SOURCES) $(OS_PRIM_SOURCES) usrdef.touch Findprim xmakefile
	@ECHO "#** Re-making" $@ because of $?
	rm -f usrkit.c
	./Findprim $(KIT_SOURCES) $(SOURCES) $(OS_PRIM_SOURCES) > usrkit.c

scmLYN : $(COMMON_OBJECTS) $(LYN_OBJECTS)
	@echo "#** Re-linking" $@ because of $?
	rm -f $@
	$(CC) $(LDFLAGS) -o $@ $(COMMON_OBJECTS) $(LYN_OBJECTS) $(LYN_LIB)

usrLYN.c : $(LYN_SOURCES) $(SOURCES) $(OS_PRIM_SOURCES) usrdef.touch Findprim xmakefile
	@echo "#** Re-making" $@ because of $?
	rm -f usrLYN.c
	./Findprim $(LYN_SOURCES) $(SOURCES) $(OS_PRIM_SOURCES) > usrLYN.c

gpio.o : gpio.c scheme.touch prims.h
