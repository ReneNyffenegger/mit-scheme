#| -*-Scheme-*-

$Id: triv.con,v 1.5 1999/01/02 06:11:34 cph Exp $

Copyright (c) 1989-1999 Massachusetts Institute of Technology

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or (at
your option) any later version.

This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
|#

;;;; "Trivial" constructor needed to bootstrap cref.

(declare (usual-integrations))

(package/add-child!
 (find-package '())
 'cross-reference
 (in-package (package/environment (find-package '()))
   (let ((cref/generate-all)
	 (cref/generate-constructors)
	 (cref/generate-cref)
	 (cref/generate-cref-unusual)
	 (cref/generate-trivial-constructor))
     (the-environment))))
(let ((source (package/environment (find-package '( cross-reference))))
      (destination (package/environment (find-package '()))))
  (environment-link-name destination source 'cref/generate-all)
  (environment-link-name destination source 'cref/generate-constructors)
  (environment-link-name destination source 'cref/generate-cref)
  (environment-link-name destination source 'cref/generate-cref-unusual)
  (environment-link-name destination source 'cref/generate-trivial-constructor))

(package/add-child!
 (find-package '(cross-reference))
 'analyze-file
 (in-package (package/environment (find-package '(cross-reference)))
   (let ((analyze-file))
     (the-environment))))
(let ((source (package/environment (find-package '(cross-reference analyze-file))))
      (destination (package/environment (find-package '(cross-reference)))))
  (environment-link-name destination source 'analyze-file))

(package/add-child!
 (find-package '(cross-reference))
 'constructor
 (in-package (package/environment (find-package '(cross-reference)))
   (let ((construct-constructor)
	 (construct-loader))
     (the-environment))))
(let ((source (package/environment (find-package '(cross-reference constructor))))
      (destination (package/environment (find-package '(cross-reference)))))
  (environment-link-name destination source 'construct-constructor)
  (environment-link-name destination source 'construct-loader))

(package/add-child!
 (find-package '(cross-reference))
 'formatter
 (in-package (package/environment (find-package '(cross-reference)))
   (let ((format-packages)
	 (format-packages-unusual))
     (the-environment))))
(let ((source (package/environment (find-package '(cross-reference formatter))))
      (destination (package/environment (find-package '(cross-reference)))))
  (environment-link-name destination source 'format-packages)
  (environment-link-name destination source 'format-packages-unusual)
  (environment-link-name source
			 (package/environment (find-package '(runtime scode)))
			 'symbol-name))

(package/add-child!
 (find-package '(cross-reference))
 'reader
 (in-package (package/environment (find-package '(cross-reference)))
   (let ((read-file-analyses!)
	 (read-package-model)
	 (resolve-references!))
     (the-environment))))
(let ((source (package/environment (find-package '(cross-reference reader))))
      (destination (package/environment (find-package '(cross-reference)))))
  (environment-link-name destination source 'read-file-analyses!)
  (environment-link-name destination source 'read-package-model)
  (environment-link-name destination source 'resolve-references!))