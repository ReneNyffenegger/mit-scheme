#!/bin/bash

# Copyright 2000,2001,2002,2003,2005,2006 Massachusetts Institute of Technology
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA.

set -e
umask 022

PROJECT_NAME=mit-scheme
PROGRAM=${0}

usage ()
{
    echo "usage: ${PROGRAM} TYPE" >&2
    echo "  TYPE must be 'snapshot' to specify today's date" >&2
    echo "    or 'standard' to specify standard release" >&2
    exit 1
}

(( ${#} == 1 )) || usage
TYPE=${1}

# We assume that there's a git working tree here that's in the right state.
[[ -d ${PROJECT_NAME} ]] || usage

# Make sure there's a change log for us to publish.
(cd "${PROJECT_NAME}"; etc/make-git-log)

# Determine the appropriate release and tag info.
source "$(dirname "${PROGRAM}")"/release-prefix
case ${TYPE} in
    snapshot)
	RELEASE=$(date +%Y%m%d)
	TAG=snapshot-${RELEASE}
	;;
    standard)
	RELEASE=$(get_release "${PROJECT_NAME}")
	TAG=$(get_release_tag "${RELEASE}")
	;;
    *)
	usage
	;;
esac

DIST_DIR=mit-scheme-${RELEASE}
LIARC32_DIST_DIR=mit-scheme-c32-${RELEASE}
LIARC64_DIST_DIR=mit-scheme-c64-${RELEASE}
OUTPUT_DIR=.out

# Set up trap to clean up any temporary files.
CLEANUP_BASE=$(pwd)
cleanup ()
{
    cd "${CLEANUP_BASE}"
    rm -rf "${DIST_DIR}" "${LIARC32_DIST_DIR}" "${LIARC64_DIST_DIR}"
}
trap cleanup EXIT SIGINT SIGQUIT SIGTERM
cleanup

rm -rf "${OUTPUT_DIR}"
mkdir "${OUTPUT_DIR}"

# Create the dist directory, a subset of the repo.
echo "Creating the distribution directory"
mkdir "${DIST_DIR}" "${DIST_DIR}"/etc
for FILE in src doc LOG dist/Makefile; do
    cp -pR "${PROJECT_NAME}"/"${FILE}" "${DIST_DIR}"/.
done
cp -pR "${PROJECT_NAME}"/etc/xscheme.el "${DIST_DIR}"/etc/.

# Configure the dist directory.
echo "Configuring the distribution directory"
(cd "${DIST_DIR}"/src; ./Setup.sh) > "${OUTPUT_DIR}"/src-config 2>&1
(cd "${DIST_DIR}"/doc; autoconf) > "${OUTPUT_DIR}"/doc-config 2>&1

# Clean up after autoconf.
find "${DIST_DIR}" -type d -name autom4te.cache | xargs rm -rf

# Make sure permissions are reasonable.
find "${DIST_DIR}" -exec chmod go-w '{}' \;

# Now make the liarc dist directories.
echo "Creating the liarc distribution directories"
cp -pR "${DIST_DIR}" "${LIARC32_DIST_DIR}"
cp -pR "${DIST_DIR}" "${LIARC64_DIST_DIR}"

# The liarc dist requires additional setup.

compile_liarc_bootstrap ()
{
    (
    cd "${1}"/src
    MIT_SCHEME_EXE=${2} etc/make-liarc-dist.sh
    ) > "${OUTPUT_DIR}"/"${3}" 2>&1
}

echo "Compiling the liarc32 bootstrap files"
compile_liarc_bootstrap "${LIARC32_DIST_DIR}" mit-scheme-i386 liarc32-compile

echo "Compiling the liarc64 bootstrap files"
compile_liarc_bootstrap "${LIARC64_DIST_DIR}" mit-scheme-x86-64 liarc64-compile

# OK, we've built the directories, time to build the output files.
echo "Building distribution archive files"
TAR_FILE=${DIST_DIR}.tar.gz
LIARC32_FILE=${LIARC32_DIST_DIR}.tar.gz
LIARC64_FILE=${LIARC64_DIST_DIR}.tar.gz
ZIP_FILE=${DIST_DIR}.zip
UCODE_FILE=${DIST_DIR}-ucode.tar.gz
CHANGELOG=changelog.txt
OUTPUTS=("${TAR_FILE}" "${LIARC32_FILE}" "${LIARC64_FILE}" "${ZIP_FILE}" \
    "${UCODE_FILE}" "${CHANGELOG}")

rm -f "${OUTPUTS[@]}"

tar czf "${TAR_FILE}" "${DIST_DIR}"
tar czf "${LIARC32_FILE}" "${LIARC32_DIST_DIR}"
tar czf "${LIARC64_FILE}" "${LIARC64_DIST_DIR}"
tar czf "${UCODE_FILE}" "${DIST_DIR}"/src/COPYING "${DIST_DIR}"/src/microcode
cp -p "${DIST_DIR}"/LOG "${CHANGELOG}"

rm -rf "${DIST_DIR}"/src/lib
# zip will complain if we have any dangling symlinks.
for S in $(find "${DIST_DIR}" -type l); do
    [[ ! -r ${S} ]] && rm -f "${S}"
done
zip -rlq "${ZIP_FILE}" "${DIST_DIR}"

chmod -w "${OUTPUTS[@]}"
echo "Success!"
