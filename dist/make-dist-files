#!/bin/bash

# Copyright 2000,2001,2002,2003,2005 Massachusetts Institute of Technology
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or (at
# your option) any later version.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA.

set -e

if [[ ${#} -gt 1 ]]; then
    echo "usage: ${0} [TYPE]" >&2
    exit 1
fi

TYPE=${1:-standard}

case ${TYPE} in
(standard)
    FOO=$(ls mit-scheme-*.zip)
    if [[ ${FOO} =~ mit-scheme-([0-9.]+)\.zip ]]; then
	VERSION=${BASH_REMATCH[1]}
    else
	echo "Unable to determine version number; maybe in wrong directory?" >&2
	exit 1
    fi
    ;;
(snapshot)
    VERSION=$(date +%Y%m%d)
    ;;
(*)
    echo "Unknown distribution type: ${TYPE}" >&2
    echo "Valid types: standard snapshot" >&2
    exit 1
    ;;
esac

: ${DIST_DIR:="${HOME}"/mit-scheme/dist}

TL_DIR=$(pwd)
BUILD_ROOT=mit-scheme-${VERSION}
SRC_FILE=${BUILD_ROOT}.tar.gz
LOCAL_DIR=/usr/local
BINDIR=${LOCAL_DIR}/bin
AUXDIR=${LOCAL_DIR}/lib/mit-scheme
OUTPUT_DIR=.out

if [[ ! -f ${SRC_FILE} ]]; then
    echo "No source file: ${SRC_FILE}." >&2
    exit 1
fi

MKDIR=(install -d -m 755)
INSTALL=(install -p)
INSTALL_DATA=("${INSTALL[@]}" -m 644)

fixup_perms ()
{
    chmod -R og-w "${1}"
}

DOC_BUILD_DIR=${BUILD_ROOT}-doc
DOC_IMAGE_DIR=${DOC_BUILD_DIR}-image
DOC_BUILD_OUT=${OUTPUT_DIR}/doc-build
DOC_IMAGE_OUT=${OUTPUT_DIR}/doc-image
STAMP_DOC_BUILD=${DOC_BUILD_DIR}.stamp
STAMP_DOC_IMAGE=${DOC_IMAGE_DIR}.stamp
if [[ ! -f ${STAMP_DOC_BUILD} ]]; then
    echo "Building documentation" >&2

    rm -rf "${BUILD_ROOT}" "${DOC_BUILD_DIR}"
    tar xzf "${SRC_FILE}"
    mv "${BUILD_ROOT}" "${DOC_BUILD_DIR}"
    (
	set -e
	cd "${DOC_BUILD_DIR}"/doc
	./configure
	make
    ) &> "${DOC_BUILD_OUT}"
    touch "${STAMP_DOC_BUILD}"
fi

if [[ ! -f ${STAMP_DOC_IMAGE} ]]; then
    echo "Make images for documentation" >&2
(
    set -e

    # First build the image for binary distributions.
    rm -rf "${DOC_IMAGE_DIR}"
    (
	set -e
	cd "${DOC_BUILD_DIR}"/doc
	make install-info-gz DESTDIR="${TL_DIR}"/"${DOC_IMAGE_DIR}"
	make install-html DESTDIR="${TL_DIR}"/"${DOC_IMAGE_DIR}"
    )
    "${INSTALL_DATA[@]}" "${DOC_BUILD_DIR}"/src/COPYING \
	"${DOC_IMAGE_DIR}"/"${AUXDIR}"/doc/.
    fixup_perms "${DOC_IMAGE_DIR}"

    # Then build the images for documentation tarballs.
    DOC_FORMATS=(html info pdf ps)
    IMAGE_DIR=${BUILD_ROOT}/doc
    for FORMAT in "${DOC_FORMATS[@]}"; do
	DOCFILE_BASE=${BUILD_ROOT}-doc-${FORMAT}
	rm -rf "${BUILD_ROOT}"
	"${MKDIR[@]}" "${IMAGE_DIR}"
	(
	    set -e
	    cd "${DOC_BUILD_DIR}"/doc
	    make install-"${FORMAT}" "${FORMAT}"dir="${TL_DIR}"/"${IMAGE_DIR}"
	)
	rm -f "${DOCFILE_BASE}".tar.gz
	tar cvzf "${DOCFILE_BASE}".tar.gz "${IMAGE_DIR}"
	rm -f "${DOCFILE_BASE}".zip
	zip -r "${DOCFILE_BASE}".zip "${IMAGE_DIR}"
	rm -rf "${BUILD_ROOT}"
	chmod 444 "${DOCFILE_BASE}".*
    done

    touch "${STAMP_DOC_IMAGE}"
    rm -rf "${DOC_BUILD_DIR}"
) &> "${DOC_IMAGE_OUT}"
fi

for ARCH in i386 x86-64; do
    BUILD_DIR=${BUILD_ROOT}-${ARCH}
    SRC_DIR=${BUILD_DIR}/src
    IMAGE_DIR=${BUILD_DIR}-image
    TARFILE=${BUILD_DIR}.tar.gz
    BINDIR=/usr/local/bin
    STAMP_BUILD=${BUILD_DIR}.stamp
    STAMP_IMAGE=${IMAGE_DIR}.stamp
    STAMP_TAR=${BUILD_DIR}-tar.stamp

    if [[ ! -f ${STAMP_BUILD} ]];then
	echo "Building binaries for arch ${ARCH}" >&2
	(
	    set -e
	    rm -rf "${BUILD_DIR}"
	    tar xzf "${SRC_FILE}"
	    mv "${BUILD_ROOT}" "${BUILD_DIR}"
	    (
		set -e
		cd "${SRC_DIR}"
		./configure --enable-native-code="${ARCH}" \
		    --enable-static-libs=yes --enable-dynamic-modules=no \
		    --with-mcrypt=no --with-libpq=no --with-db-4=no
		make
	    )
	    touch "${STAMP_BUILD}"
	) &> "${OUTPUT_DIR}"/"${ARCH}"-compile
    fi
    if [[ ! -f ${STAMP_IMAGE} ]]; then
	echo "Making image for arch ${ARCH}" >&2
	(
	    set -e
	    rm -rf "${IMAGE_DIR}"
	    (
		set -e
		cd "${SRC_DIR}"
		make install DESTDIR="${TL_DIR}"/"${IMAGE_DIR}"
	    )
	    # Don't save system-specific files.
	    rm -rf "${IMAGE_DIR}"/"${BINDIR}"

	    fixup_perms "${IMAGE_DIR}"
	    touch "${STAMP_IMAGE}"
	    rm -rf "${BUILD_DIR}"
	) &> "${OUTPUT_DIR}"/"${ARCH}"-image
    fi
    if [[ ! -f ${STAMP_TAR} ]]; then
	(
	    set -e
	    cd "${IMAGE_DIR}"/usr/local
	    tar cvzf "${TL_DIR}"/"${TARFILE}" *
	    chmod 444 "${TL_DIR}"/"${TARFILE}"
	) &> "${OUTPUT_DIR}"/"${ARCH}"-tar
	touch "${STAMP_TAR}"
	rm -rf "${IMAGE_DIR}"
    fi
done
rm -f *.stamp
